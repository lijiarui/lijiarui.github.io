{"meta":{"title":"李佳芮de博客","subtitle":"时间看得见","description":"李佳芮的博客，桔子互动创始人，现实的理想主义者","author":"Li jiarui","url":"http://lijiarui.github.io"},"pages":[{"title":"为何写作 && 为何建站","date":"2018-02-07T05:23:07.000Z","updated":"2018-11-16T02:59:55.510Z","comments":false,"path":"about/index.html","permalink":"http://lijiarui.github.io/about/index.html","excerpt":"","text":"为何写写作我是一个愿意写东西的人。从初中开始，我一直都有自己的私密笔记本,至今每年都会写一些长篇大论的文章；从2013年开始，我受最爱的女神王潇的影响，开始写手账（趁早效率手册），每一天的计划，每一天做了什么事，然后划勾勾;从2016年底开始，我受一个朋友的影响，开始写周计划和周总结，并维持每两周发一封邮件记录所有的东西，每封邮件的思考都像小作文一样冗长。 写作让我学会了深度思考，写作让我有了很多成长。 为何建站搭建这个博客，纯粹是为了找合伙人，为了找合作伙伴。 我发现当我刚刚认识一个合作伙伴的时候，总是先从他的博客认识他，想知道这几年他是什么样的经历，他内心经历了哪些事情，他研究了哪些方向，他为什么要走到现在的路。 我知道，对方也是抱着这个目的来研究我。 所以，这个站点就是这么一个有功利性的地方，我会努力在这里展示我的专业技能、创意、愿景、想法、运营理念以及我发现的问题和解决这个问题的方式，希望我的合作伙伴可以更加了解我，进而加入我们。我是一个做chatbot的创业者，我的公司是桔子互动 本站会陆陆续续加入技术文章、随笔、整理过的周总结和思考、我喜欢的书籍、电影、歌曲。等我渐渐有空吧，会把豆瓣、微博、私藏的东西都放上来的。 嗯，等我有空的。。。。。。。 关于作者 李佳芮，桔子互动创始人 90后创业者，连续创业者 全栈工程师，chatbot开发者，wechaty 作者及社群发起人 2016年，舞蹈自媒体[舞哩]创始人，视频全网播放2千万 2015年，创立桔子互动，业务主要为社交媒体运营服务，曾为亚马逊、腾讯、华为、爱迪尔珠宝、鹏金所等提供技术及运营服务 2014年，休学创业，去深圳创立婚庆O2O平台艾娘子，公司是蛮蛮互动，寓意野蛮生长 2013年，和几个北邮同学做了一个工作室，专门做微信相关的产品开发 我喜欢的东西 跑步，马拉松 攀岩 跳舞 喝酒 我的连接 豆瓣 各种矫情的小酸文，大部分都是仅自己可见的文章，写长文章的主要阵地 微博 随时随地发感想吧，因为人少 简书 打算渐渐把技术随手记的东西从印象笔记迁移到简书，因为markdown太舒服 github 我也不知道为啥我就那么喜欢看follower人数往上涨。。。 微信: ruirui_0914 由于好友太多，朋友圈都是官方信息, 请谨慎添加","keywords":"关于我"},{"title":"QA - 帮助那个中心...","date":"2017-03-23T22:24:49.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"help/index.html","permalink":"http://lijiarui.github.io/help/index.html","excerpt":"","text":"有什么想问的来李佳芮的ama 直接发问吧","keywords":"help，qa，帮助中心，站内帮助"},{"title":"各种自荐连接","date":"2017-03-23T22:24:49.000Z","updated":"2018-11-16T02:59:55.698Z","comments":false,"path":"links/index.html","permalink":"http://lijiarui.github.io/links/index.html","excerpt":"","text":"我的信息 豆瓣 各种矫情的小酸文，大部分都是仅自己可见的文章，写长文章的主要阵地 微博 随时随地发感想吧，因为人少 简书 打算渐渐把技术随手记的东西从印象笔记迁移到简书，因为markdown太舒服 github 我也不知道为啥我就那么喜欢看follower人数往上涨。。。 微信: ruirui_0914 由于好友太多，朋友圈都是官方信息, 请谨慎添加"},{"title":"标签云","date":"2017-03-23T22:24:49.000Z","updated":"2018-11-16T02:59:55.698Z","comments":true,"path":"tags/index.html","permalink":"http://lijiarui.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MicroSoft Tech Summit-快速搭建一个聊天机器人","slug":"2018-10-21-Microsoft-HOL","date":"2018-10-21T14:57:52.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2018-10-21-Microsoft-HOL.html","link":"","permalink":"http://lijiarui.github.io/presentation/2018-10-21-Microsoft-HOL.html","excerpt":"Author: 李佳芮，桔子互动创始人，微软AI MVP。 这是我在2018微软技术暨生态大会 动手实验室的分享，2018微软技术暨生态大会10月24日在上海世博中心如约而至。 作为微软最负盛名的技术峰会，此次大会将带领参会者深入领略技术精髓，感受微软黑科技的魅力，探讨在云计算、物联网、移动互联网、大数据和人工智能的发展洪流中，如何洞察新技术与新变革，聚焦解决问题与创造价值，如何开启企业数字化转型之旅。","text":"Author: 李佳芮，桔子互动创始人，微软AI MVP。 这是我在2018微软技术暨生态大会 动手实验室的分享，2018微软技术暨生态大会10月24日在上海世博中心如约而至。 作为微软最负盛名的技术峰会，此次大会将带领参会者深入领略技术精髓，感受微软黑科技的魅力，探讨在云计算、物联网、移动互联网、大数据和人工智能的发展洪流中，如何洞察新技术与新变革，聚焦解决问题与创造价值，如何开启企业数字化转型之旅。 本次实验帮助开发者从实际业务场景出发，围绕微软Luis 和 Typescript 做实践课，让开发者轻松的做一个微信聊天机器人。另外，对于希望转变为人工智能的传统产品经理或传统工程师而言，可以帮助你快速了解行业背景并快速上手，对于技术决策者，可以在此阶段清楚地了解聊天机器人的局限性和发展。 Luis 介绍LUIS (Language Understanding Intelligent Service，https://www.luis.ai) 是微软发布的面向开发者的自然语言语义理解模块开发服务。LUIS的使命是让非NLP专业的开发者能够轻松地创建和维护高质量的自然语言理解模型，并无缝对接到相关的智能应用当中。通过LUIS平台，非NLP专业的开发者可以轻松创建一个LUIS App，并通过标注所期望的输入(自然语言指令)和输出(意图和实体)来进一步“培养” 它。在整个开发过程中，开发者并不需要了解背后算法的细节，只需要清晰地定义自己需要让机器理解的用户意图和实体即可。LUIS App 可以是任何传统的应用，包括社交媒体应用，聊天机器人，实体机器人，车载以及支持语音的桌面程序应用。LUIS的开发流程更像是一个教学过程：开发者是老师，LUIS App是学生。老师通过不停地告知学生正确的语义解析结果来完成教学。一个好的教学过程是一个“训练+实践”的闭环：标注一定量的起始数据；训练得到语义理解模型；对模型进行必要的测试；发布模型并应用到真实用户场景；甄选应用日志中的语句；继续标注并更新模型。这个过程周而复始，通过不停地迭代开发，不停地改善理解模型，使其越来越接近人类的理解能力。 实验目标 搭建一个LUIS 模型 使用wechaty 创建一个微信聊天机器人 将LUIS 模型整合进入微信机器人 系统要求 Ubuntu 18 Microsoft Visual Studio Code (VSCode) Node (version &gt; 10.0) Github 账号 Luis 账号 步骤 安装Unbutun 18 安装 Node 和 Npm 安装Microsoft Visual Studio Code (VSCode) 安装Github 从Github 上clone 项目：https://github.com/lijiarui/microsoft-summit-chatbot-course 实验 创建一个LUIS模型 创建一个微信机器人 将LUIS 模型整合到微信机器人中 实验1–创建一个LUIS模型创建一个LUIS 模型可以分为3个步骤: 创建APP，训练模型，发布模型。下面将会进行详细的讲解： 任务1-创建APP1.登陆 www.luis.ai 如果之前注册过就sign in, 注册过直接login 就可以了： 2.点击左上角的“Create New App” 创建一个新的应用 3.在弹框中，给你的LUIS模型起个名字，并设置描述，然后选一个应用环境，我们选择中文。然后点击“Done” 4.然后进去LUIS 模型的主页面，接下来去训练LUIS 模型。 任务2-增加意图和实体接下来，我们为我们的APP增加两个意图，意图表示用户希望执行的任务。定义一组意图，对应于用户希望在APP中执行的操作。 1.点击‘Create new intent’ 创建一个 ‘BookFlight’ 的意图，并把这个意图命名为‘BookFlight’点击‘Done’ 2.输入一个可能的订票话术，比如“帮我订一张去上海的机票”，然后回车： 3.推荐最少写5个类似的话术，你会发现这些话术会自动的被标注为BookFlight 的意图。 4.回到点击‘Intent’再添加一个 ‘GetWeather’ 的意图，像刚刚一样，也至少输入5个有表示天气的话术： 定义实体(entities)你可以创建各种类别的实体。实体代表话术中有用的词语或者短语，他们将是完成任务的关键要素。实体和与之相关的意图对于APP 的任务执行是非常重要的。在我们这个订机票的例子中，“位置”,“日期”，“航空公司”，“舱位”都是非常重要的实体。 实体有多种类型： Simple： 通过机器学习的方法识别出来，是最简单的实体 Hierarchical: 通过机器学习的方法识别出来，根据上下文关系得到的实体，比如Location，根据上下文知道是ToLocation还是FromLocation. 他们共享一个实体集合，但是根据上下文被分配到不同的实体中。 Composite: 通过机器学习的方法识别出来，有多个实体组成，比如3张去上海的机票，可以是PlaneTicketOrder 的实体，由number 和ToLocation 组成 List: 是通过文本匹配的方法识别出来的，是一组封闭的词语。LUIS 不会为List 自动生成更多的值 Regex: 通过正则表达式识别出来的实体 Pattern.any: 是一种长度可变的占位符，在模板中使用，用来标出实体的起始位置和结束位置。比如搜索书籍： 谁写了{BookTitle}[?] 1.点击‘Create new entity’ 创建新的实体. 2.在弹框中将实体命名为‘Location’，选择实体类别为’Hierarchical’ 3.选择实体类别后，会自动跳出’Child name’,点击‘Add a child entity’增加两个Child name, 分为为’ToLocation’和 ‘FromLocation’ 4.最后，点击’Done’完成保存这个实体。 使用预定义实体(Pre-Build Entities)接下来，我们增加一个预定义的时间实体。 1.点击‘Add prebuild Entity’ 2.预定义实体现在还不支持中文，我们可以选择’number’先来感受一下。 任务3-训练模型我们定义了意图和实体以后，需要进行模型的训练。点击右上角的’Train’。当按钮由红色变为绿色以后，训练成功。为了让模型越来越好用，需要添加更多的标注好的意图和实体。 点击‘Publish’可以将这个App发布出去。最后就可以整合到微信机器人中。 实验2–创建一个微信机器人这一部分来展示如果快速搭建一个微信机器人 任务1-运行代码1.输入命令git clone https://github.com/lijiarui/microsoft-summit-chatbot-course.git 2.进入目录microsoft-summit-chatbot-course， cd microsoft-summit-chatbot-course 3.安装依赖包，运行npm install 任务2-运行代码1.运行 npm run start 实验3–将LUIS 模型整合到微信机器人中任务1-发布LUIS版本1.点击LUIS的Publish获取APPID和KEY 2.发布成功后，可以看到绿色的成功提示，点击Refer to the list of endpoints切换到管理页面： 3.获取Authoring Key: 4.点击 Application Information, 获取APP ID 任务2-将LUIS RESTFUL API 接入wechaty1.安装官方的’luis-sdk’,并将获取的key 和 Application ID 填入： 2.根据已有的LUIS 配置写示例代码： 3.运行 npm run start： 用户发送，即可得到测试回复： 注意：由于时间关系，本次实验只是讲解了LUIS 的部分，LUIS获取的key 只是免费测试版本，后续需要和Azure 结合，获取到稳定的付费版本接口。","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"},{"name":"LUIS","slug":"LUIS","permalink":"http://lijiarui.github.io/tags/LUIS/"},{"name":"MicroSoft","slug":"MicroSoft","permalink":"http://lijiarui.github.io/tags/MicroSoft/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"构建人脸识别聊天机器人--Wechaty Blinder","slug":"2018-01-25-how-to-build-face-blinder-bot","date":"2018-01-25T15:04:27.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2018-01-25-how-to-build-face-blinder-bot.html","link":"","permalink":"http://lijiarui.github.io/presentation/2018-01-25-how-to-build-face-blinder-bot.html","excerpt":"","text":"这是我在2017-北京-谷歌开发者节 TensorFlow 分会场的分享，本次活动是由谷歌（中国）、谷歌北京开发者社区主办，北京邮电大学协办的2017谷歌开发者节北京站在北京邮电大学圆满举办。我主要介绍了如何使用开源项目Wechaty-Blinder快速搭建一个微信脸盲机器人，迅速帮助你识别照片里的人。 Who am I 在分享这个开源项目之前，我先介绍一个我的先天性缺陷： 近视+散光，但是每年带眼镜的次数是个位数。 先天性记不住人样貌。 每天还要见好多人，微信有大几千好友。 通常情况下我会和一个人在微信上聊的火热，然后在一次活动见面又聊的很开心，然后过了几个月再次见面的时候，我们双方热情打招呼后心里默默嘀咕这个人是谁。。。。为了不让大家觉得我是一个高冷の女子，在我经常活动的地方，只要有人往我这看,我就热情的打招呼，也许对方也在默默嘀咕这是哪个神经病。。。。对，我有脸盲。而今天介绍的脸盲机器人，用人工智能，专门帮助我认识各种人的。 Content 我会从5个角度来做这场分享，首先简单的介绍下TensorFlow, 然后介绍下Google 的Facenet，再来介绍下我们的3个开源项目：Wechaty, Node-Facenet, Wechaty-Blinder, 最后会给大家做现场的代码演示。之所以介绍wechaty-blinder 的项目要介绍wechaty 和node-facenet，是因为wechaty-blinder 是基于wechaty 和 node-facenet 这两个开源项目的。 Google TensorFlow 脸盲机器人wechaty的底层用到了TensorFlow, 今天要介绍的wechaty-blinder 是一个基于TensorFlow 和google 的论文 Facenet 实现的node.js 开源项目，可以帮助解决人脸认证、识别和聚类等问题。 Google Facenet Facenet 来源于Google 的论文FaceNet: A Unified Embedding for Face Recognition and Clustering，是一个用来给人脸做分类的神经网络。与其他的深度学习方法在人脸上的应用不同，FaceNet并没有用传统的softmax的方式去进行分类学习，然后抽取其中某一层作为特征，而是直接进行端对端学习一个从图像到欧式空间的编码方法，然后基于这个编码再做人脸识别、人脸验证和人脸聚类等，欧式集合距离可以直接来代表脸的相似度。FaceNet算法有2个特点： 去掉了最后的softmax，而是用元组计算距离的方式来进行模型的训练。使用这种方式学到的图像表示非常紧致，使用128位足矣。 元组的选择非常重要，选的好可以很快的收敛。 Open Source Chatie Wechaty 是一个开源的针对个人号的微信机器人框架，仅仅使用6行JavaScript代码就可以实现一个简单的机器人，同时支持Linux，Windows，Darwin(OSX/Mac) 和 Docker。博客地址是 https://blog.chatie.io Open Source Chatie 最简单的6行代码代码在这里，也可以去我的项目wechaty-getting-started下快速入门wechaty。wechaty 最终运行页面就是右手边的样子。 Open Source Chatie Github, Docker, npm 相关地址在这里，wechaty有非常完善的devOps，一旦代码提交，就会自动进行自动化测试，当测试通过后，会自动打包更新docker 和npm， 所以也欢迎各位开发者来pull request。 Open Source Chatie Wechaty 现在有非常完善的开发者社区，开发者覆盖了全球，包括中国、美国、澳洲、英国等。这是一部分的contributor的列表，同时chatie 下面也有几个分值项目来支持微信机器人。 Open Source Node-FaceNet Node-FaceNet 是一个基于TensorFlow和facenet ，解决人脸认证、识别和聚类问题的开源项目。它是一个用node封装的python的Facenet库，主要实现了下面三个主要功能： 把不同的脸放在一个欧几里得空间中，不同脸之间的距离代表着脸的相似度。 很好的优化了识别脸的性能，一张脸只要128维向量即可表示。 在LFW 数据集上可以达到99.63% 的准确率，在YouTube 数据集上可以达到95.21% 的准确率。 Open Source Node-FaceNet 这个开源项目核心是2个类和3个方法，更多的细节可以参考我写的文档。两个主要的类是： Face, 毫无疑问代表一张脸 Facenet, 代表的是一坨脸。。。 三个主要的方法是: aling()， 从一张图中找出包含的所有的脸，通过先找到脸的坐标，然后生成一个Face 实例数组。换句话中，传一张图片给align，他会突出一个脸的array. embedding()， 将脸转换成一个128维向量 distance()，计算两个脸的距离 Open Source Node-FaceNet 这是一个简单的例子，我们来读左边的代码。先新建一个Facenet 的实例，然后传入照片，看打印出来的face的结果。右边是打印的结果。通过这个我们可以看出来，align 函数在图片上找出这张脸的坐标以后，生成一个Face实例，把所有的实例放在一个数组里面。 这个坐标包括两种，一种是能够框出这个脸的框框，另外一个是脸上关键性的5个特征点。看log感受一下： bounding box: 用来框出脸的框框，用两个关键点表示：一个是左上角的点，一个是右上角的点。 landmarks:代表脸上关键性的5个特征点，左眼、有眼、鼻子、左边的嘴、右边的嘴 embedding: 代表脸的128维向量, Facenet 论文中的embedding 代表一个脸部特征矩阵，是一个128维向量。 Open Source Node-FaceNet 这是另外一个例子，把脸和脸之间的距离可视化。我们可以看到这个绿色的框框就是上面我说的align出来的能够框出脸的框框，1.45，1.47, 0.66 三个数字分别代表了两个脸的相似程度，可以看出，数字约小，脸约像。如果两个脸是属于一个人的，他们的距离通常是0.75。当然这只是一个经验性数字，还要具体情况具体分析。 Open Source Wechaty-Blinder 终于讲到了今天的主角，脸盲机器人的开源项目wechaty-blinder, 其实当你了解了上面两个项目以后，wechaty-blinder 就非常好理解了。 这个项目是可以记住你所有的微信好友的脸。 一旦机器人帮你记住了这张脸，你随时随地都可以为这张脸命名。他有下面3个功能： 记住群里所有好友的脸 记住通讯录里所有好友的脸 记住你发的每张照片中的脸 当然，他就可以帮助你认出你发的照片、群、和好友中哪些是同一个人啦。 Open Source Wechaty-Blinder 这是使用wechaty-blinder 的效果图，看到当我发甄子丹和刘德华的脸的时候，他会自动吐出库里面和这个相似的所有的脸，并可以随时给他们改名字。简单的说就是两点： 识别出脸 给脸起名字 Open Source Wechaty-Blinder大家可以体验一下，这个是我预先为这个活动创建好的wechaty-dev-facenet 微信群，群里面有机器人，扫码进去就可以体验这个功能了。 这个机器人已经用Docker 封装好了，运行下面的命令，就可以启动这个机器人了，WECHATY_TOKEN=TOKEN 是可以你随便起名字的。1docker run -d --restart=always --volume=/workdir:/workdir -e WECHATY_TOKEN=TOKEN zixia/wechaty-blinder 如果你想随时在网页上控制这个机器人怎么办呢？很简单，跟着我做下面这五步： 打开 https://chatie.io/angular/ ，然后点击 Click to run 在输入框填入你的 WECHATY_TOKEN ，然后点击 Set Token 等待显示登录二维码，然后用手机摄像头（微信内长按不可以）扫描登录 建立一个新群，建群后不要做任何操作，先把群名修改为任意包含 facenet 的字符串 在群里面发图片，附体在你身上的机器人就会施法了。 最后，感谢Google 办了这么一场有趣的活动 本次活动邀请到了来自海内外数十位资深工程师，除了 Google的研发专家团队，还邀请到了JetBrains团队，这也是 JetBrains 团队在中国大陆首次针对Kotlin的官方分享。另外，该活动还邀请到了国内诸多一线研发团队，滴滴、Strikingly、百度、集智社区，桔子互动等公司，带来他们近期的一线研发经验。 DevFest 是 Google 每年秋季在全球GDG（谷歌开发者社区）推行的，针对 Google 技术开发者、爱好者所举办的技术交流活动。其主要目的在于同步 Google 相关各种先进技术，并进行推广与应用，促进本地社区成员的交流。DevFest活动除设置有吸引力的主题分享，还有互动参与环节和来自 Google 的正版周边礼物，对于 Google 技术开发者、爱好者都是不可错过的体验机会。","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"},{"name":"facenet","slug":"facenet","permalink":"http://lijiarui.github.io/tags/facenet/"},{"name":"人脸识别","slug":"人脸识别","permalink":"http://lijiarui.github.io/tags/人脸识别/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"女性科技节-从0到1打造你的个人智能助理","slug":"2018-01-14-techfestival","date":"2018-01-14T12:47:35.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2018-01-14-techfestival.html","link":"","permalink":"http://lijiarui.github.io/presentation/2018-01-14-techfestival.html","excerpt":"","text":"活动信息：《从0到1，搭建你的个人智能助理》 PPT内容分享 最后，放一张我在现场的图片吧。","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/tags/chatbot/"},{"name":"女性科技节","slug":"女性科技节","permalink":"http://lijiarui.github.io/tags/女性科技节/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"写在2017年的最后一天","slug":"2017-12-31-the-last-day-of-2017","date":"2017-12-31T10:04:13.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"thought/2017-12-31-the-last-day-of-2017.html","link":"","permalink":"http://lijiarui.github.io/thought/2017-12-31-the-last-day-of-2017.html","excerpt":"","text":"今天在趁早手册上写年终总结，回看每一个月的计划，我竟然没想到，当初竟然某个月有过一个愿望是买一条白金项链。 而今年年中，我送人了一条Tiffany的白金项链都忘记了自己还需要。 然后现在我的脖子上依然空空的。 — 前言 我也不知道为什么，会把这句话作为前言。我看到了2017年第一天的日记 我的2017呢？ 发什么了什么？好像每一天都是一件大事，又好像每一天都不能值得称赞。 我也不知道为什么，只是忽然想把这些都写下来而已。 2016年，我给自己电影名称是—- 激荡。2017年，我给自己定影名称是—–蛰伏。 和2016年更多的PPT相比，2017年更多的是坐在电脑前无休止的代码。 我做了自己的社群管理工具系统。我做了自己的活码裂变系统。我做了自己的差旅订票机器人。我进入了百度AI加速器。我做了2个影响力还算不错的微信聊天机器人社群。 我研究了NLP，我研究了DST，还有知道了一堆乱七八糟的算法和逻辑。 2016年我做了很多很多事，很多很多错事。2017年，我好像没做太多事，却第一次在年底有了沉甸甸的积累感。 技术篇这一年，技术上得到了很大很大的提高，以前想都不敢想的事情，我做出来了，一个人沉在代码里面，写了很多很多。github上一篇绿油油的commit，不分白天和黑夜，不分休息日和工作日。从最开始阅读英文文档很大的障碍，到现在在github上写了一个纯英文的repo，由于涉及到越来越多的数据，被迫从public 变成了private。我听到每一个来这个项目人的衷心的赞赏。我似乎也不那么害怕和外国人聊天了，和Jack 几个小时几个小时的开会一点点的提升了我所有的自信。我曾经最怕自己成为一个彻头彻尾的项目经理，现在我终于可以跳出来了，我成为了一个合格的程序媛，我知道这条路很长很长，但是我愿意走下去，因为我再路的尽头，看到的是光明和希望。 管理篇这一年，我终于学会了做计划。回顾我一年的周报，从最开始的随意，到后来终于开始了有深度的总结。从三月计划，到月计划，到周计划。三月计划中包括了月计划，月计划中包括了周计划。虽然鲜有计划能够真正按照我定的标准完成，却依然看到了自己的脚印，在目标和计划中，一点点的在往正确的方向走着。正在学习着更加包容一个人，不再逼迫一个人，可这似乎是一个需要修炼好多年的技能。这一块只能算一个小学生吧。终于开始学着思考了。每一件事，都尝试着复盘，做一件事之前，也有了计划的目标。终于开始自信了，终于开始敢于开口了，终于开始不那么害怕失去了，不那么患得患失了，也可能是因为真的失去了很多，也可能是因为真的得到了很多。 情感篇我在效率手册上写到，我希望2017年可以有个男朋友。这一年年终谈了2场恋爱，很短又很随意，也不知道算不算完成了2017年的计划。看起来算，可实际上，他又不算，因为没有一场像曾经那样刻骨铭心，甚至离开后在内心都没有一丝波澜。想想可能是因为我的计划没有标准吧。才会出现似乎完成又好像没完成的冷清结局。除了两场恋爱，还有很多桃花运，有怯怯的，也有浓烈的。。可貌似所有的感情都是是旅游，我期待的是回家。有的时候真正期待的人，也是得不到的。 梦想篇 “感谢我一直坚持没放弃自己的理想，感恩节快乐” —-11月23日 这句话是一个好友送给我的，很多眼泪也都是因为这个人用非常犀利的话把我希望藏起来的问题都赤裸裸，一丝不挂的放在了桌上。。追梦的路上，很庆幸有这些人，这种人的存在。因为这种人的存在，在知道梦想是多么珍贵。我一直是一个鄙视情怀甚至一点没有情怀的人，可是这一年下来，情怀这种虚无的东西，竟然前无声息的增长起来。 经历了执行中的艰难挫败，经历了对成本的让步和无奈，经历了对大众认知的失望，经历了每一天都对明天开销的焦虑，经历了自己员工憎恶，更加发觉情怀的可贵，情怀是支撑自己走下去的东西，而情怀此时不是坚持初衷，而是在不断的妥协中尽量保留一点点天生的骄傲。好似鸦片，上瘾飘飘欲仙，是回到现实中最大的力量。 总结一下： 3月，正式辞职了。 4月，遇见了第一个可能的合伙人，谈崩 5月，遇见了第二个可能的合伙人，谈崩 6月，放弃了找合伙人的想法，自己做 6月，实现了创业以来的第一次收支平衡 7月，莫名的拉了一笔不错的皮条，小赚了一笔 8月，激情四射的开始走一条半灰色的技术方向，希望用半灰色的手段帮助正常用户解决问题 9月，原有的业务被彻底扼杀，我找不到了方向，绝望 10月，确定了方向选择聊天机器人，做差旅助手 11月，一次又一次的换了底层架构，直到第三次确认并搭建了demo 12月，进入了百度AI加速器，得到了一些肯定，得到了越来越多人的认可。 2018年呢？ 我在效率手册上写了这些计划 一定要去参加马甲线大赛，已经推迟了2年的计划。。。 开始写博客，每个月至少写一篇专栏文章。越发觉得文字是最好的思想沉淀方式。私密日志不算。 每个月至少采访一个人，做出行业视频 公司要相继完成天使轮和A轮。 搭建一个10个人的稳定团队 至少搞定5家航空公司，接入我的订票服务 至少拿出10万做一笔小的投资，而不是稳定的基金 去厦门 去泰国 谈一场超过6个月的恋爱 最后，翻开了2017年的微博，摘抄出一个一个的心情句子，聊以慰藉。 “今年打算再看看，特别努力的一年是什么样子” — 1月6日 “那年我21岁，在我一生的黄金时代，我有好多奢望，我想爱，想吃，还想在一瞬间变成天上班名办案的云，后来我才知道，生活就是一个缓慢受锤的过程，人一天* 天老下去，奢望也一天天小时，最后变得像挨了锤的牛一样。可是我过21岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。–《黄金时代》” —-1月13日 “爱一个人，爱的是他身上的自己” —-1月19日 “本来只是打算离职，打了电话之后，算了算钱，彻底决定离职了。最后，看一场《降临》算是收尾了吧” —-1月25日 “怎么办，今天定了好多小目标@Natelie77” —2月1日 “第一次给公众号的文章评论获得这么多赞，盗用了我女神@王潇_潇洒姐 书里《按自己的意愿过一生》的文字。文章链接 《开公司的刘总》 ，评论： “这种接活做活，通宵达旦，上一单与下一单充满投机性， 产品以客户主观意志为标准，生产方式毫无规律，出卖单位时间劳动力在慢车道上发展，不存在米次法则的突* 破口，其实谈不上是真正的创业，充其量只能算作有雇佣关系的自由职业者或者手艺人或者包工头。。”，得到了103个赞 ” —2月5日 “绝大多数人都无法以自己喜欢的方式过一生，无论是能力，机遇或者各种说不清楚道不明的原因。生活讲示例而不看梦想，所谓的实力不光是有多少钱和美貌，还包括多少抵得住寂寞的耐心，坚持自我的孤独和缜密规划的现实。” –2月13日 “既然无法逃避，只能振作起来，给命运一个拥抱。是不是很热血动漫台词的感觉？” —2月15日 “难得一个宁静的下午，准备开启freelancer的新篇章” —2月16日 “搬到孵化器的第一天，有一种新生入学的喜悦感，坐在对面的是一个做滑板的创业者，晚上一起吃了麻辣烫，觉得似乎开启了一段美好的探险之旅。在这里，我终于不再感觉自己是个异类，入职好久都没法和同事打成一片，一度怀疑自己得了社交恐惧症的我，在这里的第一天竟然如此轻松[笑cry][笑cry][笑cry][笑cry]” —2月24日 “我一直担心机会来了抓不住就会错过机会，没想到只要准备好了，这个时代，遍地是机会” —-3月13日 “懒，是最彻底的人间失格” —3月17日 “按自己的意愿过一生，这是一句誓言，我记得住” —- 3月18日 “人生三道，上坡道，下坡道，没想到” —-3月23日 “愿我们相逢在更高处—-《爱乐之城》教会我的事” —3月31日 “我想让你瞧见，所以照亮了自己，我有能力去爱，有能力被爱，在若干年后我会牵着你的手，和你说，那晚璀璨灯火下，我就知道，你是我一生所爱” —4月2日 “穿着8cm的小细高跟走过河上的木质桥奔向火车站，战战兢兢又趾高气昂，鞋的小细根随时会陷入木质桥的窟窿洞中。 ” —4月9日 “不要有受害者心态，要自信” —- 4月13日 “人际关系拼的不是技巧，而是日久天长，今天趁早手册的一字真言” —4月18日 “做个商人，做个谦卑的人，做个有愿景的人，做个尊重别人的人，做个尊重自己的人” —4月19日 “每天想着下车的人做不了品牌，认清自己的战场，做品牌就要保持长跑心态，如果不行，退出。” —-4月20日 “你知道比悲伤更令人悲伤的事情是什么么？比悲伤更令人悲伤的是，空欢喜” —-4月27日 “真心说出的话不一定是真话啊，那是情话啊” —-4月29日 “一个人走，走的快，一群人走，走的远。真正的高手都是悄无声息的摆渡人” —-5月4日 “随着年龄的增长，就是会信任好久以前的人，就是会喜欢旧的东西。” —5月16日 “第一次有这种感觉：都在等着你失败看你笑话，以证明对方不是弱者，以证明他认为你不行对的判断是正确的。然而，我偏偏不想让这些人得逞” —-5月23日 “虽然一身毛病，却朝气澎湃，随时可以为自己喜欢的事去死” —–5月24日 “每一天都感觉目标越来越清晰，越来越近，这种感觉tmd爽了” —5月31日 “好喜欢徐静蕾，认真的偏执狂。看起来又温柔又美丽” —- 6月7日 “终于开始有收入了，几年创业日子的第一个月收支平衡” —6月12日 “”休息能力是一种职业能力，和沟通、表达、讲演、时间管理一样，是你实力的一部分。真正的休息，不是为了爽，而是为了更好工作。” —-6月13日 “以前喜欢死扛，没什么熬两夜做不了的事情，等遇见的事情越来越多，我才发现并不是这样。发现自己渺小的可怜 ” —-6月17日 “做人呐，随大流最舒服，标新立异最累” —6月21日 “我不怕你太受欢迎，我只怕你来者不拒。 孤独比将就有趣多了” —-6月25日 “她能给你再来一次的勇气、空间和机会” —7月9日 “后来，真硬朗开明的，更是梁凤仪的语录，以至于我在电脑里多年存有语录文档，不时看看。“哭是无助，伤心，绝望，放弃的表示。只余一分希望，一点精力，一线生机，一份援引我都不会哭，因而我会默默苦干。” 像这句，陪我很多夜晚。 ” -* –7月20日 “这一刻，我仿佛也拿到了我的鬼冢虎，也许未来，我也会制作我的nike，到底未来什么样，我不知道。—纪念和Mypolly 正式合作的第一天” —7月22日 “city of starsm are you just shining for me….” —-8月17日 “以前你觉得是因为a的事情，后来你会慢慢就发现是因为b，不过管他是因为什么，我要的是结果 ” —8月19日 “只有眼前路，没有身后身” —–8月30日 “如果换一种生活不能更好，为什么还要换呢？” —-9月8日 “一旦盲目乐观，就离死不远了” —–9月9日 “怀有一颗敬畏之心” —-9月11日 “做计划是最痛苦的事情之一” —-9月17日 “下班看到快手的logo，我希望五年以后，我的logo 也能这样挂出来。” —–9月20日 “你要么曲阜，要么反抗，就是这样。你只要开始，解决一个问题，解决下一个问题，解决下下个问题。等解决了足够的问题，你就能回家了。 《火星救援》” ——10月14日 “不能因为现实复杂而放弃梦想，也不能因为理想遥远而放弃挑战” —-10月19日 “回顾了一下做过的蠢事。发现都是必然的、无可避免的。不然后来更蠢” —-10月30日 “爱上了章子怡，爱她对待热爱事业认真严肃的态度，精力大风大浪后对待流言蜚语的豁达，对真实情感的司仪追求，以及作为母亲的温柔目光。” —-10月30日 “对待表演非常尊敬且认真的人，靠自己一步一步走到现在这个地位。” —– 10月30日 “今年辞职创业，最大的进步是勇敢了，不再怕犯错误，学会了总结、思考和做计划。计划必须可控，输出要有质量，同时计划要有一个明确的完成评价标准。从2月到现在的周报正逐渐变得有明确的计划和认真的思考，感谢潇洒姐女神人设和没完没了骂我的创业导师，许愿明年我能入选亚杰汇，这样就能见到女神了。” —-11月8日 “在幽默感，文字能力和逻辑能力上最欠缺的那部分人总是高估自己的能力。换句话说，越是无能的人，越是可能高估自己的水平，所谓【不知道自己不知道】知道真正接受相关训练，才可能【知道自己不知道】—–达克效应” —-11月12日 “找到一个点，聚焦努力做好，其他交给命运” —-11月15日 “会遇到谈不拢的人，会遇到给你施压的人，终究还是回遇到很多帮助你的人” —-11月15日 “有人说，常胜将军的秘诀是不打没有把握的仗。可这一刻，忽然发觉自己没有任何准备，只想临阵脱逃，绝望” —11月17日 “感谢我一直坚持没放弃自己的理想，感恩节快乐” —-11月23日 “总之你记住一件事情，就是所欲的资源都是需要你经过努力去争取的。如果你最开始就放弃了，你就不会有任何机会。而更重要的是，你要自己去发现机会，如果机会你都不知道，那就谈不上争取了。” —-12月1日 “爸爸说，他们* 以后都是平凡人，你是要成气候的，我7岁，我信了。有的时候，我努力，我打卡，有的人说你干嘛那么努力啊，觉得你格格不入，我干嘛要和你格格入啊，我就是格格不入，你平凡人啊。。。。很多的胆怯，就是因为没有人和你说这句话。好的教育，就是给他一个最优版本的命运的预言” —–12月13日 “有些人活着的唯一姿态就是率性，内方外方昂首阔步，譬如在下。人生就是体验，体验就要淋漓” —-12月27日 “我爱这个行业，就像我爱活着的人生” —-12月30日","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"计划","slug":"plan","permalink":"http://lijiarui.github.io/tags/plan/"},{"name":"趁早效率手册","slug":"趁早效率手册","permalink":"http://lijiarui.github.io/tags/趁早效率手册/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"为研究生分享-CHATBOT行业分享","slug":"2017-12-14-chatbot-sharing","date":"2017-12-13T16:35:08.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2017-12-14-chatbot-sharing.html","link":"","permalink":"http://lijiarui.github.io/presentation/2017-12-14-chatbot-sharing.html","excerpt":"","text":"PPT 内容分享","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/tags/chatbot/"},{"name":"北邮","slug":"北邮","permalink":"http://lijiarui.github.io/tags/北邮/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"百度AI开发者大会分享UNIT和桔子互动的合作","slug":"2017-12-4-baidu-ai","date":"2017-12-04T13:11:19.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2017-12-4-baidu-ai.html","link":"","permalink":"http://lijiarui.github.io/presentation/2017-12-4-baidu-ai.html","excerpt":"","text":"活动信息 PPT内容分享 最后，放一张我在现场的图片吧。","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/tags/chatbot/"},{"name":"unit","slug":"unit","permalink":"http://lijiarui.github.io/tags/unit/"},{"name":"百度","slug":"百度","permalink":"http://lijiarui.github.io/tags/百度/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"Docker 玩转微信机器人框架","slug":"2017-11-17-docker","date":"2017-11-16T16:45:49.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2017-11-17-docker.html","link":"","permalink":"http://lijiarui.github.io/presentation/2017-11-17-docker.html","excerpt":"","text":"PPT 内容分享","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"docker","slug":"docker","permalink":"http://lijiarui.github.io/tags/docker/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"Learn Rivescript","slug":"2017-10-04-learn-rivescript","date":"2017-09-20T13:00:00.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"chatbot/2017-10-04-learn-rivescript.html","link":"","permalink":"http://lijiarui.github.io/chatbot/2017-10-04-learn-rivescript.html","excerpt":"","text":"Study from rivescript and rivescript-js Write part of the doc as I prefered. Compare with Superscript, I prefer rivescript more for the following reason: Doc is far more complete than superscript and has all kinds of examples. Rivescript is more controllable than superscript. Superscript will do some random thing for more Intelligent. Rivescript using Unicode to support Chinese wildcards and almost support all basic Chinese rules, which superscript cannot do. Really simple, without MongoDB, while superscript has MongoDB built-in. Command+ Triggers - Replies ! Definitions // Comments % Previous * Conditionals ^ Line Breaking TagsTags has &lt;angled&gt; bracketsInsert text in their place, or set a variable silently. &lt;@&gt;&lt;star&gt;,&lt;star1&gt; - &lt;starN&gt;These tags can not be used with + Trigger &lt;botstar&gt;, &lt;botstar1&gt; - &lt;botstarN&gt;This tag is similar to &lt;star&gt;, but it captures wildcards present in a % Previous line. Here is an example: 123456+ i bought a new *- Oh? What color is your new &lt;star&gt;?+ (@colors)% oh what color is your new *- &lt;star&gt; is a pretty color for a &lt;botstar&gt;. These tags can not be used with + Trigger. &lt;input&gt;, &lt;reply&gt;The input and reply tags are used for showing previous messages sent by the user and the bot, respectively. The previous 9 messages and responses are stored, so you can use the tags &lt;input1&gt; through &lt;input9&gt;, or &lt;reply1&gt; through &lt;reply9&gt;to get a particular message or reply. &lt;input&gt; is an alias for &lt;input1&gt;, and &lt;reply&gt; is an alias for &lt;reply1&gt;. 1234567891011121314// If the user repeats the bot's previous message+ &lt;reply&gt;- Don't repeat what I say.// If the user keeps repeating themselves over and over.+ &lt;input1&gt;* &lt;input1&gt; == &lt;input2&gt; =&gt; That's the second time you've repeated yourself.* &lt;input1&gt; == &lt;input3&gt; =&gt; If you repeat yourself again I'll stop talking.* &lt;input1&gt; == &lt;input4&gt; =&gt; That's it. I'm not talking.&#123;topic=sorry&#125;- Please don't repeat yourself.// An example that uses both tags+ why did you say that- I said, \"&lt;reply&gt;\", because you said, \"&lt;input&gt;\". &lt;id&gt;This tag inserts the user’s ID, which was passed in to the RiveScript interpreter when fetching a reply. With the interpreter shipped with the Perl RiveScript library, the &lt;id&gt; is, by default, localuser. &lt;bot&gt;The &lt;bot&gt; tag is used for retrieving a bot variable. It can also be used to set a bot variable. 123456789+ what is your name- You can call me &lt;bot name&gt;.+ tell me about yourself- I am &lt;bot name&gt;, a chatterbot written by &lt;bot master&gt;.// Setting a bot variable dynamically+ i hate you- Aww! You've just ruined my day.&lt;bot mood=depressed&gt; &lt;env&gt;The &lt;env&gt; tag is used for retrieving global variables. It can also be used to set a global variable. 123+ set debug mode (true|false)* &lt;id&gt; == &lt;bot master&gt; =&gt; &lt;env debug=&lt;star&gt;&gt;Debug mode set to &lt;star&gt;.- You're not my master. &lt;get&gt;,&lt;set&gt;&lt;add&gt;, &lt;sub&gt;, &lt;mult&gt;, &lt;div&gt;12+ give me 5 points- &lt;add points=5&gt;You have been given 5 points. Your balance is: &lt;get points&gt;. These tags can not be used with + Trigger &lt;@&gt;equal to {@ &lt;star&gt;} &lt;formal&gt;, &lt;sentence&gt;, &lt;uppercase&gt;, &lt;lowercase&gt;&lt;call&gt;Tags have {curly}bracketsModify the text around them. {random}12+ say something random- This &#123;random&#125;message|sentence&#123;/random&#125; has a random word. {weight}1234+ greetings- Hi there!&#123;weight=20&#125;- Hello!&#123;weight=25&#125;- Yos kyoco duckeb! {@ } / &lt;@&gt;{topic}{person}, {ok}\\s \\nLine Breaking123456+ tell me a poem- Little Miss Muffit sat on her tuffet,\\n^ In a nonchalant sort of way.\\n^ With her forcefield around her,\\n^ The Spider, the bounder,\\n^ Is not in the picture today. \\s space \\n line break Definitions ! local concat = newline | space | none （”file scoped”） ! version = 2.0 ! var name = Tutorial ! global debug = true ! global depth = 50 ! person i am = you are rivescript brainstart from begin.rive— contains some configuration settings for your bot’s brain. const variables— bot variables Substitutions: always lowercased array global person Triggercatch-all wildcards123456789+ my name is *- Nice to meet you, &lt;star1&gt;!+ * told me to say *- Why would &lt;star1&gt; tell you to say \"&lt;star2&gt;\"?- Did you say \"&lt;star2&gt;\" after &lt;star1&gt; told you to?+ i am * years old- A lot of people are &lt;star1&gt; years old. special wildcards # only match a number _ only match a word with no numbers or spaces Alternatives and Optionalsalternatives1234567891011+ what is your (home|office|cell) number- You can reach me at: 1 (800) 555-1234.+ i am (really|very|super) tired- I'm sorry to hear that you are &lt;star&gt; tired.+ i (like|love) the color *- What a coincidence! I &lt;star1&gt; that color too!- I also have a soft spot for the color &lt;star2&gt;!- Really? I &lt;star1&gt; the color &lt;star2&gt; too!- Oh I &lt;star1&gt; &lt;star2&gt; too! optionals12345678+ how [are] you- I'm great, you?+ what is your (home|office|cell) [phone] number- You can reach me at: 1 (800) 555-1234.+ i have a [red|green|blue] car- I bet you like your car a lot. 12+ [*] the machine [*]- How do you know about the machine!? use [*] optionals to ignore parts of a message by putting it before or after your trigger instead of on both sides. Arrays in triggers12345678910111213// Single word array items! array colors = red blue green yellow// Multiple word items! array blues = light blue|dark blue|medium blue// A lot of colors!! array colors = red blue green yellow orange cyan fuchsia magenta^ light red|dark red|light blue|dark blue|light yellow|dark yellow^ light orange|dark orange|light cyan|dark cyan|light fuchsia^ dark fuchsia|light magenta|dark magenta^ black gray white silver^ light gray|dark gray 123456+ what color is my (@colors) *- Your &lt;star2&gt; is &lt;star1&gt;, silly!- Do I look dumb to you? It's &lt;star1&gt;!+ i am wearing a (@colors) shirt- Do you really like &lt;star&gt;? 123// Without parenthesis, the array doesn't go into a &lt;star&gt; tag.+ what color is my @colors *- I don't know what color your &lt;star&gt; is. 123// Arrays in an optional- i just bought a [@colors] *- Is that your first &lt;star&gt;? priority triggersDefault: triggers with more words are tested first This is useful to “hand tune” how well a trigger matches the user’s message. 12345+ google *- Google search: &lt;a href=\"http://google.com/search?q=&lt;star&gt;\"&gt;Click Here&lt;/a&gt;+ * perl script- You need Perl to run a Perl script. What if somebody asked the bot, “google write perl script”? They might expect the bot to provide them with a Google search link, but instead the bot replies talking about needing Perl. This is because “ perl script” has more words than “google “, and therefore would usually be a better match. 12345+ google *&#123;weight=10&#125;- Google search: &lt;a href=\"http://google.com/search?q=&lt;star&gt;\"&gt;Click Here&lt;/a&gt;+ * perl script- You need Perl to run a Perl script. Redirectionsuse outside the reply12345678910+ hello- Hi there!- Hey!- Howdy!+ hey@ hello+ hi@ hello use inside the reply{@ &lt;star&gt;} will redirect to * reply 12+ * or something&#123;weight=100&#125;- Or something. &#123;@ &lt;star&gt;&#125; shortcut of {@ &lt;star&gt;} is &lt;@&gt; 12345678+ hello *- &#123;@ hello&#125; &lt;@&gt;+ hello- Hi there!+ are you a bot- How did you know I'm a machine? % Previoususe % to make a short discussion % Previous lines need to be lowercased just like triggers do. 12345678910+ knock knock- Who's there?+ *% who is there- &lt;star&gt; who?+ *% * who- LOL! &lt;star&gt;! That's funny! Learning Things&lt;set&gt; &amp; &lt;get&gt; 1234567891011+ my name is *- &lt;set name=&lt;star&gt;&gt;It's nice to meet you, &lt;get name&gt;.+ what is my name- Your name is &lt;get name&gt;, silly!+ i am # years old- &lt;set age=&lt;star&gt;&gt;I will remember that you are &lt;get age&gt; years old.+ how old am i- You are &lt;get age&gt; years old. retrieve variables from begin.rive 1234567// The user can ask the bot its name too!+ what is your name- You can call me &lt;bot name&gt;.- My name is &lt;bot name&gt;.+ how old are you- I am &lt;bot age&gt; years old. The &lt;formal&gt; tag is a shortcut for {formal}&lt;star&gt;{/formal} 123// Store the name with the correct casing+ my name is *- &lt;set name=&lt;formal&gt;&gt;Nice to meet you, &lt;get name&gt;! Writing Conditionals1234+ what is my name* &lt;get name&gt; == undefined =&gt; You never told me your name.- Your name is &lt;get name&gt;, silly!- Aren't you &lt;get name&gt;? 12345+ my name is ** &lt;formal&gt; == &lt;bot name&gt; =&gt; Wow, we have the same name!&lt;set name=&lt;formal&gt;&gt;* &lt;get name&gt; == undefined =&gt; &lt;set name=&lt;formal&gt;&gt;Nice to meet you!- &lt;set oldname=&lt;get name&gt;&gt;&lt;set name=&lt;formal&gt;&gt;^ I thought your name was &lt;get oldname&gt;? Constions: 12345== equal toeq equal to (alias)!= not equal tone not equal to (alias)&lt;&gt; not equal to (alias) 1234&lt; less than&lt;= less than or equal to&gt; greater than&gt;= greater than or equal to Labeled sectionsbegin with &gt; and end with &lt; Topic123456789101112131415+ i hate you- You're really mean! I'm not talking again until you apologize.&#123;topic=sorry&#125;&gt; topic sorry // This will match if the word \"sorry\" exists ANYWHERE in their message + [*] sorry [*] - It's OK, I'll forgive you!&#123;topic=random&#125; + * - Nope, not until you apologize. - Say you're sorry! - Apologize!&lt; topic Also, you can use &lt;set topic=random&gt; instead, but there is a small difference in how the two tags will behave: The &lt;set&gt; tag can appear multiple times in a reply and each one is processed in order. The {topic} tag can only appear once (if there are multiple ones, the first one wins). So, they’ll both do the same job, but {topic} is a little shorter to type. ??? 没看懂 The begin blockObject Macros","categories":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}],"tags":[{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"},{"name":"rivescript","slug":"rivescript","permalink":"http://lijiarui.github.io/tags/rivescript/"}],"keywords":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}]},{"title":"Using Jsdoc to sync the doc with the latest code","slug":"2017-09-20-add-wechaty-jsdoc","date":"2017-09-20T05:05:17.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"tech/2017-09-20-add-wechaty-jsdoc.html","link":"","permalink":"http://lijiarui.github.io/tech/2017-09-20-add-wechaty-jsdoc.html","excerpt":"","text":"In order to sync the doc with the latest code, it’s best to use jsdoc to describe the API and use jsdoc-to-markdown to generate markdown format documents to the docs directory. Yes, we planned to do this for nearly a year… Thanks to @Huan, @ax4,@hczhcz, @William, by the end of August, we finally convert all the doc to jsdoc. And I’d like to share some jsdoc experience here. We need to document them better, not only the public but also the internal modules and methods.Finally we decided to use the classic jsdoc to embed document in TypeScript, then generate document to docs/ by jsdoc2md.– @Huan said in issue 73 in Nov 2016. At first, we write the doc in wiki, and it lasts for nearly a year….. A lot of developers use wiki to learn wechaty, but the wiki’s performance is not good, it cannot update automatically and doesn’t base on user’s most demand. some minor fix (such as the different naming Message Class &amp; Class Room) improvement on the formatting, e.g. the level setting of each title maybe, add an index for better guiding– In Feb 2017, @ax4 creat an issue and expressed his willingness to contribute the document. I like @ax4‘s idea about the document guide: First: Learn the awesome features of Wechaty Second: See more advanced functions Third: Reach the boundary? Help us develop Wechaty Thanks for @ax4‘s suggestion and we decide to do the doc as soon as possible. JsDoc &amp;&amp; jsdoc2mdJsDoc is an API documentation generator for Javascriptjsdoc-to-markdown is a tool to help developers create markdown API document from jsdoc-commented JsDocJSDoc’s purpose is to document the API of your JavaScript application or library. It is assumed that you will want to document things like modules, namespaces, classes, methods, method parameters, and so on. JSDoc comments should generally be placed immediately before the code being documented. Each comment must start with a /** sequence in order to be recognized by the JSDoc parser. Comments beginning with /*, /***, or more than 3 stars will be ignored. This is a feature to allow you to suppress parsing of comment blocks. The simplest documentation is just a description 123/** This is a description of the foo function. */function foo() &#123;&#125; Reference jsdoc Introduction jsdoc English document jsdoc Chinese document Document This I use vscode as my editor, and use Document This “Document This” is a Visual Studio Code extension that automatically generates detailed JSDoc comments for both TypeScript and JavaScript files. You can use Ctrl+Alt+D and again Ctrl+Alt+D to generates documentation for whatever the caret is on or inside of. jsdoc2mdGenerates markdown API documentation from jsdoc annotated source code. Useful for injecting API docs into project README files. When you document your code using valid jscode comments and run jsdoc command (e.g. jsdoc2md example.js), then you can get a markdown output easily. At first, I just write all of jsdoc in the code and link wechaty/docs/index.md to the users, but I cannot sync README.md file with the code and make readme as simple as it can, so I have to do some else. First, I should know how jsdoc2md works. How jsdoc2md worksThis is the main use case (render documentation) sequence: User runs jsdoc2md example.js. jsdoc-api is used to obtain the raw jsdoc data for the input source code provided. (a kind of JSON output) this data is transformed into something suitable for passing into a template by jsdoc-parse (which also adds support for the jsdoc2md-specific tags like @typicalname, @done, @category etc). the resulting template data is passed into dmd. This output is returned to the user. In order to pick function name from the full api doc, I learnt about dmd, it is the default output templates for jsdoc-to-markdown. It contains handlebars partials and helpers intended to transform jsdoc-parse output into markdown API document. For the wechaty document, I change two following dmd partials: link.hbs sig-link-parent.hbs Wechaty Progress on JsDoc &amp;&amp; jsdoc2mdDiscussion historyRelated Issue@Huan, @ax4,@hczhcz, @William and I talked a lot about wechaty document on the following issues: issue73: [doc] To Embed Document in Wechaty Code for Generating Automaticly issue252: [doc] Contribute to the doc editing[ jsdoc / jsdoc2md / typedoc ] Related PRAlso, @hczhcz and @ax4 and I contribute a lot on the document: PR378: jsdoc2md may flush some pieces of the embedded doc PR380: fix jsdoc flush issue #378 and minor fix on the doc examples PR640: add documentation TODO entries PR725: add wechaty document PR321: Add JsDoc for Class Contact Doc basic lineFor the convenience of developers, our doc guideline as follows: Simple and clear Generate markdown for better readable version control and GitHub page hosting. Auto-doc working flow Develop in TypeScript Embedded doc insert in TypeScript Compile TypeScript into JavaScript, using npm run dist Run jsdoc / jsdoc2md, using npm run doc Get the final doc, in index.md, config it to chatie.io/wechaty Wechaty Jsdoc fileWe embed doc into the following file: src/wechaty.ts src/message.ts src/room.ts src/contact.ts src/friend-request.ts Wechaty jsdoc2md progress1. Generate jsdoc2md fileUsing the following command can generate document easily.1jsdoc2md dist/src/&#123;wechaty,room,contact,friend-request,message&#125;.js dist/src/puppet-web/friend-request.js&gt;&gt; docs/index.md 2. Use template to Sync Readme with api docActually, the first step is enough, but I think we need insert and sync all of the API docs into README, so I use a template by the following command:1jsdoc2md --template docs/partials/README.hbs dist/src/&#123;wechaty,room,contact,friend-request,message&#125;.js dist/src/puppet-web/friend-request.js&gt;&gt; README.md Then add the partials1234567891011121314&#123;&#123;&gt;member-index-list~&#125;&#125;``` to show the API directory, because the full doc is too big to put in README, and it is not necessary.### 3. Linkable Code ReferencesAfter the second step, I found the link jsdoc2md generate is an anchor link(`#`), it means I cannot link it to other pages(http://chatie.io/wechaty), this is very inconvenient for readers. Inspired by [[jsdoc2md-issue-123](https://github.com/jsdoc2md/jsdoc-to-markdown/issues/123)], [@KevinAst](https://github.com/KevinAst) using jsdoc-to-markdown wrote a beatutiful doc: [astx-redux-util](https://astx-redux-util.js.org/1.0.0/). I found maybe I can created a custom partial too. Then I override the following templates in `docs/partials/overrides`, adding http://chatie.io/wechaty in the link:* link.hbs* sig-link-parent.hbsThis is the reason why I add the following script in `package.json` : jsdoc2md –partial docs/partials/overrides/*.hbs –template docs/partials/README.hbs dist/src/{wechaty,room,contact,friend-request,message}.js dist/src/puppet-web/friend-request.js&gt;&gt; README.md123456789`--partial` command override `link.hbs` and `sig-link-parent.hbs`Then, all done!# To Contributor: How to add jsdoc when contributingFor other developers, I tried my best to make it easier to add doc, just the following 2 steps:### 1. Add jsdoc in your code like the following shows. /* This is a description of the foo function. /function foo() {}1### 2. Run the following command npm run doc` Then you can find the generated jsdoc here: wechaty/docs/index.md Cheers!","categories":[{"name":"tech","slug":"tech","permalink":"http://lijiarui.github.io/categories/tech/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"技术探索","slug":"技术探索","permalink":"http://lijiarui.github.io/tags/技术探索/"}],"keywords":[{"name":"tech","slug":"tech","permalink":"http://lijiarui.github.io/categories/tech/"}]},{"title":"如何编写聊天机器人","slug":"2017-07-13-how-to-build-a-chatbot-on-itdakashuo","date":"2017-07-13T15:04:27.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2017-07-13-how-to-build-a-chatbot-on-itdakashuo.html","link":"","permalink":"http://lijiarui.github.io/presentation/2017-07-13-how-to-build-a-chatbot-on-itdakashuo.html","excerpt":"这是我在AI专题沙龙（无人车&amp;Chatbot)的分享，本次活动是由中生代技术主办。我主要介绍了Chatbot中用到的AI技术. 摘要:Chatbot，聊天机器人，用于和人类用户聊天的电脑程序。它是场交互革命，也是一个多技术融合的平台。桔子互动创始人根据自己的经验告诉大家，该如何来编写微信聊天机器人。 What are chatbots and why the hype","text":"这是我在AI专题沙龙（无人车&amp;Chatbot)的分享，本次活动是由中生代技术主办。我主要介绍了Chatbot中用到的AI技术. 摘要:Chatbot，聊天机器人，用于和人类用户聊天的电脑程序。它是场交互革命，也是一个多技术融合的平台。桔子互动创始人根据自己的经验告诉大家，该如何来编写微信聊天机器人。 What are chatbots and why the hype 早在80年代，大家普遍使用PC上网，所有网上交互都是通过PC客户端去实现的。随着网速变得越来越快，浏览器开始普及。 智能手机出现以后，人们使用电脑的时间越来越少，手机里安装的APP则越来越多。 而现在就到了聊天机器人的时代。所有bots都搭载在message的平台上，去实现所有APP上的服务。 我觉得公众号、直达号和H5这些在最开始的时候都是很像chatbot的雏形。APP实在是让用户太焦虑了，大家都希望有一个可以简单迅速找到服务的程序。 因为数据、计算能力和网速都在迅速发展，在message这种消息的APP上会出现很多有意思的应用和服务，就像PC到Web，APP到chatbot这个过程的转换一样。 我认为chatbot是未来，接下来的所有服务可能都是通过chatbot去实现的。 Chatbot Magazine创始人Matt Schlicht对chatbot的定义是：“A chatbot is a service,powered by rules and sometimes artificial intelligence,that you interact with via a chat interface.” 聊天机器人是一种由规则和一部分人工智能驱动的服务，通过聊天接口进行交互。 现在的交互方式已经发生了新的改变，我们可以通过说话去实现所有的功能。在Web和APP的时代，人要像计算机一样思考，而chatbot则是让计算机像人一样思考，做到“no UI”。 当今用户不喜欢使用APP，因为不仅用户下载的成本高，APP的开发和升级成本也非常高，而且只有极少数的APP还处于活跃状态。 而bots搭建在message平台上，无需安装，甚至在网速不佳的情况下也能进入它的服务。Chatbot处于“no UI”状态。如果只是关注逻辑层面去解决一些场景上的问题，开发的成本不会很高。 Overview of the bot ecosystemFacebook Message已经向开发者开放了，Apple ios Message APPS也在开放，Slack、Kik、Telegram和Skype都支持相关的接口。 Facebook收购了Wit.ai，google收购了Api.ai，微软推出了luis.ai。我认为这三个都是实现一样的功能，就是实行意图识别。 微软还有一个Bot Framework去做整个chat中控的系统，以及IBM推出了Watson Conversation API。 Facebook Message上面有超过10万个bots，大概有10万个开发者在Facebook Message上进行这些bots的开发。 有超过200万的用户每天在和chatbot进行交互。 在其它平台如Skype、Telegram上也有上千的bot。 消费者能够真正接触到的chatbots大概分为三类： 第一类是个人助理，帮助用户实现各种服务。 第二类是虚拟客服，根据用户的问题给相应回答。 第三类是提高生产力的工具，可以做一些信息的收集、分发消息等工作。 Chatbot是一个很大的产业，它不是只有AI和deep learning，不一定要high tech去做，也不只有算法。而是要真正去解决一些实际问题。未来它就会像APP一样在我们身边，为我们提供非常一些简洁的服务。 Requirement和正常软件开发相似，然后写一些需求的文档和需求说明。 做软件开发或APP的时候会做一些线框图或流程图。Chatbot是一个“no UI”的体验，所以要写script，了解如何收集用户的信息、怎样理解用户，并把这些用户的话术整理出来。它就是一个和用户交流的线框图的概念。 接下来要做架构开发，它同样分为前端和后端。前端就是script，更完整地收集用户信息。收集好了做成一个action给到后端，和其它的Web service做整合。 在做chatbot开发的时候，往往会陷入编码和测试反复的循环之中，因为交互还不是结构化的数据，所以会有点复杂。 Chatbot里做的测试和一般的APP测试不一样。在APP里可以简单暴力地做测试，但在chatbot里，不同的message有不同的需求或限制。做测试的时候要摸清不同message平台的区别。 要部署到一个可托管的环境并时刻去监控它，然后做推广。 最后还要做chatbot的分析，需要知道每一个会话时长是怎样的、用户对什么最感兴趣。拿到这些数据后再去调研用户的需求，形成一个循环。Chatbot主要是从场景入手，更关注的是解决一些问题和创新的点，而不是底层的开发。我认为接下来各种开发者也会从APP开发者转换成chatbot开发者，只是时间问题。 itdakashuo-how-to-build-a-chatbot Wechaty是一个可以让微信变成机器人的接口，利用这个框架可以把个人微信号变成机器人，能自动回复和提供一些服务。 Wechaty的实现原理主要是监听网页上的信息，把信息封装然后给开发者调用，开发者发送信息的时候让浏览器去实现这些功能。 Side project通过代码追踪的方式应对微信网页变化。 Wechaty的七个基本事件分别是error、scan、login、logout、message、friend和join。 Related Scene我们已经实现了微信群的CRM管理、通过各种方式邀请好友进群以及做一些多群的直播。 还有一些有意思的东西想和大家分享。 挑选一个最吸引人的头像到微信上。通过用户点赞数分析出哪些头像在男性和女性中分别最受欢迎，帮助用户挑选微信头像。 存储文件。把微信和云盘打通，可以直接把微信上收到的文件转给机器人，让机器人存进云盘里。 把歌词生成一张好看的图片。订机票、车票、酒店等。Github的通知。把用户关注的动态实时发送到微信群里，让微信群和各种平台的信息做对接，也可以收集群里的消息做分析和训练。 Chatbot确实是一个可以帮我们解决生活中很多问题的工具，只要是开发者都能去实现它。","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"母亲节技术女性专场沙龙-女程序员与程序共舞之路","slug":"2017-05-14-motherday-tech","date":"2017-05-13T16:15:21.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"presentation/2017-05-14-motherday-tech.html","link":"","permalink":"http://lijiarui.github.io/presentation/2017-05-14-motherday-tech.html","excerpt":"","text":"活动信息 PPT内容分享 我和妈妈现场插画合影","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"startup","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"程序媛","slug":"程序媛","permalink":"http://lijiarui.github.io/tags/程序媛/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"产品分享|如何做一个用户喜欢的chatbot","slug":"2017-03-30-how-to-build-a-chatbot-people-like","date":"2017-03-30T03:10:36.000Z","updated":"2018-11-16T02:59:55.510Z","comments":true,"path":"chatbot/2017-03-30-how-to-build-a-chatbot-people-like.html","link":"","permalink":"http://lijiarui.github.io/chatbot/2017-03-30-how-to-build-a-chatbot-people-like.html","excerpt":"","text":"chatbot行业的依然存在着大量的泡沫，但有一点我们不得不承认，未来新的会话式交互正在颠覆整个科技行业。chatbot和会话式交互已经不是一个新名词了，可以预见的是，随着技术的发展，聊天机器人即将会推动一场颠覆性的行业创新。所有的主流巨头公司都在为丰富多样的对话形式搭建底层框架。 去年发生了这些里程碑事件：– Facebook Messenger 全面开放给开发者– Apple iOS message apps 出现了– Slack, Kik, Telegram, 和 Skype 开始支持机器人接入 同时，巨头还在积极为开发者搭建各类ai相关的工具– Facebook 推出了 Wit.ai7– Google 推出了 Cloud Natural Language API– Microsoft 推出了 Bot Framework– IBM 推出了 Watson Conversation API 这些公司的入场预示着聊天机器人行业的一轮新的洗牌，这不禁让我想起，10年前，Apple 推出了app store，大量的app迅速涌入。然而只有很少的一部分有较高的用户留存。如今，bot的市场和当初的app是非常相似的。 产品希望从场景切入为C端用户提供服务，这样的bot应该是什么样子的呢？首先，我们分析下bot面临的两个重大挑战 1. 获取用户 在和身边非技术同学的聊天中发现，90%的人都不知道chatbot是什么，这不禁让我想起了移动应用（app）刚刚出现的情景——当应用市场的雏形出现的时候，很多人经过很长时间才明白了什么是app。然而现在，如果你连Pokémon Go 是什么都不知道的话，大家可能会觉得你是个外星人了。 但是即使你‘了解’chatbot，也很难找到bot应用进行体验。Product Hunt(https://www.producthunt.com/) 和 Botlist(https://botlist.co/) 可以帮开发者导一些流量，他们是类似于豌豆荚或者应用宝这样的应用商店，我们也可以称他们为bot store，虽然这些store 可以帮助开发者带来一些用户，而bot真正的流量来源还是主流的社交平台。Slack, Kik, Telegram 和 Skype 都拥有各自的bot store。Facebook Messenger 甚至会在搜索联系人的时候推荐一些bot。虽然我们并不清楚Messenger 是按照什么规则推荐bot的，但是可以确认的一点是，那些足够幸运的，可以在Facebook中搜索到的bot 通过messenger的巨大流量迅速获取到了大量的用户。 下图是一些当前主流的bot store截图： 我有一种的直觉，在未来的bot 应用中，群消息机器人将会改变行业的规则（虽然Messenger现在还不支持，但是从国内社群运营的概念已经火了几年了，而且，社群运营中真正和chatbot相关的非营销类的场景还没有被挖掘出来）。 毕竟，老用户的推荐是获取新用户最好的方式，如果在一个群聊中开启了一个机器人，之前不了解这个bot的人会立刻和他产生互动，迅速实现飞速的用户增长。 恩，所以我在此给我自己打个广告。。我是专门做微信群自动化运营的服务提供商。åç2. 用户留存 和获取用户同样具有挑战的是如何在产品中留住用户。用户回来继续使用bot并积极参与是有原因的。开发者可以通过定期发推送来召回用户，而最好的方式还是应该还是bot的产品本身，究竟有哪些核心功能能吸引他们回来，常见的方式有签到，月/周的订阅等。 按理说，与app相比，bot用户的获取成本相对较低。只需要发送一条消息就体验bot产品了，这远比让用户从app store上下载一个app要容易的多。当然，这同样存在另外一个问题，很多用户可能只是好奇的来体验一下，他们用过一次之后就不会再回来了。 那么，什么样的bot可以克服这些问题呢？ 1. 游戏类bot “再来一次我就可以完成了。。。” ‘使人上瘾的bot’ 会持续吸引用户的注意力并让用户想要的更多。这些bot自称有极高的用户活跃度，当然，也应该是这样的。 Trivia Blast Trivia Blast(https://www.facebook.com/triviablast1/) 是一个非常有意思，快速提问问题的机器人，他提供各种各样的问题，答对以后会得分升级，问题类别包括音乐、科学、体育、历史、电影等等。这个bot有用一个全球积分榜，你可以看到你的好友、以及你同一个城市、同一个国家甚至全世界的人的排名，并和他们进行分数比拼。由于Trivia Blast 是一个智力游戏，所以即使你长时间沉溺在这个游戏中也不会有很深的负罪感。 Swelly Swelly(https://www.facebook.com/swell.bot) 是另外一个一旦你玩起来就会上瘾的bot，Swelly 通过直接向用户提问来帮助用户做一些日常的决定。你可以为别人的选择投票，比如’我应该用什么头像呢？’ 或者’我今天应该穿什么鞋？’ 你可以发表你自己的问题或者只是帮助其他人做决定。我不得不说，随机帮助一些人做决定是一件很酷的事情。 2. 习惯养成类bot 习惯养成类bot 的核心功能就是召回用户。 Joy Joy(http://www.hellojoy.ai/) 追踪你的心情并让你的心智更加健康。他会每天或者每周对你进行检查并告诉你现在的感受。Joy会记录你所有的想法并会生成情绪报告，如果检测到你的情绪低落，它甚至会提供一些减压的互动。我很喜欢这个bot，未来也许他会在日常生活中让你随时心情愉悦。 3. 效率类bot 现阶段，这类bot一般都在在slack team 中提高团队的协作能力，也有一小部分是面向普通用户的，比如下面这个应用。 Sourcing Bot Source Bot 帮助用户迅速找到需要的开发者和团队，使用bot向用户收集信息，他们现在有合作的276家外包公司提供服务。 写在最后： 在botlist上我们可以看到bot的分类有很多，包括分析工具、交流、设计、开发工具、教育、娱乐、文件管理、视频、游戏、健康、新闻、市场、旅游、运动、购物。。。。。等等，而每个bot的访问量并不是很多，平均在100-300之间，几个很有名的bot也不过是10k左右，面向用户场景的bot设计仍然有很大挑战，但是我相信，这是一个正在增长的市场，当你找到很好的场景并不断打磨你的bot产品，你就会做出一个用户喜欢的chatbot。 最后，祝所有做chatbot的产品经理们找到场景，切入痛点，实现产品从0到1 ^-^。 本文内容纯属原创，转载请注明，图片都是我用sketch一点点拼的，内容也是一点点码的，所以不要直接盗取我的内容啦。","categories":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}],"tags":[{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"},{"name":"产品","slug":"产品","permalink":"http://lijiarui.github.io/tags/产品/"}],"keywords":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}]},{"title":"如何做一个更有价值的人呢","slug":"2017-03-16-how-to-be-valuable","date":"2017-03-15T16:09:25.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2017-03-16-how-to-be-valuable.html","link":"","permalink":"http://lijiarui.github.io/thought/2017-03-16-how-to-be-valuable.html","excerpt":"","text":"我女神说，世上一切都是交换，拿你有的，换你没有的。 我觉得她说的，特别对。 别人为什么愿意你和合作，别人为什么愿意和你交流，因为你有价值，你能给他一些他所没有的东西，或者，他所需要的东西。 所以问题来了，如何做一个有价值的人呢？ 首先要洞察‘他’所需要 给‘他’所需要的 不要多多push，‘他’不要的，你硬塞，就是垃圾。 另外： 一切不要太太较真，随缘 一定要一起磨合，要观察，要彻底了解以后才能下结论","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"startup","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"纪念离职，庆祝我成为自由职业者","slug":"2017-02-25-be-a-freelancer","date":"2017-02-25T06:07:34.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2017-02-25-be-a-freelancer.html","link":"","permalink":"http://lijiarui.github.io/thought/2017-02-25-be-a-freelancer.html","excerpt":"","text":"我一直觉得自己是一个无趣的人，虽然变得有趣是我重要追求之一。 我一直觉得自己最无趣的表现，就是很少会给生活仪式感。比如去年我的生日，没有吃蛋糕，接到几条生日祝福就这样过去了，比如入职那一天，波澜不惊，没有任何宏图大志，再比如我也忘了，总之会经常性的缺乏情调，虽然并非我本意。 然后没想到，离职这一天，我竟然这么有仪式感。 决定提离职的那天，我去了北医三院，从头到尾的检查了身体，包括肿瘤因子。 最后依然只是贫血，带了一堆吃不完的药回家。 于是我像一个战士一样，提了离职。 老板不同意，就一周后再提。 离职流程走完以后，迅速搬到了五道口。 好多同事觉得猝不及防，知道我发了朋友圈以后才知道我离职。只觉突然，毫无征兆。 昨天晚上是我第一天搬进五道口，本无意加班，只是想把工作做完。 可是当我点击邮件发送按钮的那一刻，看了眼表，还是敲过了12点。 叫车，回家。 这一次，在下车到进入小区的200米路程中，竟如此新潮澎湃。 是的，我自由了。 而且，是和我喜欢的一切—–工作内容，工作时间，工作地点以及工作梦想。 恩，我搬进了孵化器中的一个工位。 我的位置对面坐着两个滑板少年，之所以叫他们滑板少年，因为他们的创业项目是滑板。一个文艺范十足且呆萌可爱，一看就是纯种的滑板少年，北科毕业的。相比之下，创始人则长的比较木讷，说话慢吞吞的，来自清华美院。 在我坐在我的新位置的时候，仿佛时光退回到了大学入学，一切都是那么新鲜，迫不及待的认识新同学，想看别人的人生。 — 这种滋味，已阔别8年。 我一度以为，自己性情大变。研究生入群，新员工入职，对于任何人，我都没有了那种新鲜感，甚至高冷的等对方约着一起吃饭。 而这次破天荒的，8点一刻，PNP一层只剩下我们3个，我摘下耳机，问他们要不要一起吃饭。 他们很开心，说，好。 我也很开心。因为我知道，对面的两个滑板少年，有我想听的故事，有我喜欢的故事。 这就是我喜欢创业的原因，总会遇见有趣的人，总会遇见好故事。 一度，也能让我变得丰满一点。 晚上一起和滑板少年们吃了麻辣烫，发现其实还是一个很容易和大家打成一片，开始惊讶于为什么在职期间，自己一直无法融入这个群体。 没什么原因，只是大家的价值观不同。 有人喜欢午饭后集体打一波王者荣耀，然后睡个午觉，准时下班，完成工作，仅此而已。 而有的人，就是因为自己喜欢的事情，奋勇前行。 吃麻辣烫的时候，我和那个长的比较正经的滑板少年聊起我之前做的舞蹈项目，我说自动做了舞蹈项目以后，就再也不跳舞了。 他说，他很庆幸，他还好，还很喜欢滑板。 顿了一顿，他忽然说，只是没有以前那么喜欢了。 “这种感觉就像你很爱很爱一个人，付出了很多，可是她却没有给你太多回报，你会有些伤心和失望，但我会还会爱下去。” 我看到了他眼镜中的坚定。 更恍惚见看到了他开创了自己的滑板运动品牌和社群。 他比我要厉害，我很爱很爱一个人，如果没有回报，我就会停止付出了。 所以我停止了舞蹈的项目。 和他聊天，终于不会被问到‘何苦呢’，‘何必呢’，道理我们都懂。 他只拿了几十万的投资，花钱也很小心。 “滑板是一个很小的市场，我不知道钱花光以后，是否还能拿到下一轮” 他说的这话，我听到了无奈，但是更多的看到了坚持，他坚持滑板行业2年多了，期间一直在改变方向，但一直在滑板行业。 值得敬佩。 听到这话，我有点心疼，因为我懂，进入社会以后，不再有固定收入的感觉。 为了不耽误接下来拿北京居住证，我每个月用自己的公司给自己交社保，公司的钱和自己的钱都要我出，一个月什么都不做，就会支出3500块。 我甚至不知道，我的产品上线之后，到底能不能有客户用。 但是我依然乐观。 因为，自由价更高。 我昨天做事情的效率，超过2016年的任何一天。 我最近的坚定，超过2016年的任何一天。 我依然迷茫，但是我不不再焦虑。 有人说，连续做一件事，3年必有小成，5年必有所成，10年必成专家。 这句话没错，而且一定要在一个行业。 我才在这里3个月，不到穷困潦倒，我不会放弃了。 这是我认真开始的第3个项目，从婚庆，到舞蹈，到chatbot。 恩，不到穷困潦倒，一定不会放弃了。 我也听到了自己的坚定，仿佛自己已成为了一个侠，背着上方宝剑，腰杆笔直，目光鉴定的，前行。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"startup","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"The secret lives of wechat chatbots","slug":"2017-02-22-the-secret-lives-of-wechat-chatbots","date":"2017-02-22T04:50:27.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"chatbot/2017-02-22-the-secret-lives-of-wechat-chatbots.html","link":"","permalink":"http://lijiarui.github.io/chatbot/2017-02-22-the-secret-lives-of-wechat-chatbots.html","excerpt":"Chatbots rocketed into the limelight last year, bolstered by the enthusiasm of Facebook and Microsoft, though the technology wasn’t mature yet. In China, however, the response was more muted. While Facebook was busy pushing its new Messenger app – boasting when it hit 11,000 bots – Tencent, the maker of WeChat, quietly let millions of accounts develop AI-powered bots of their own, keeping a wary eye out for abuse. Accounts like Cara, for example, are shut down, as Tencent wants to confine bots to customer service-related functions within brand accounts.","text":"Chatbots rocketed into the limelight last year, bolstered by the enthusiasm of Facebook and Microsoft, though the technology wasn’t mature yet. In China, however, the response was more muted. While Facebook was busy pushing its new Messenger app – boasting when it hit 11,000 bots – Tencent, the maker of WeChat, quietly let millions of accounts develop AI-powered bots of their own, keeping a wary eye out for abuse. Accounts like Cara, for example, are shut down, as Tencent wants to confine bots to customer service-related functions within brand accounts. But unsanctioned bots run amok on the social network, often tactlessly spamming groups or artificially inflating a brand’s likes and follows. The Chinese tech firm clamped down last year on thousands of accounts, denouncing the use of external software to alter WeChat. Tencent did not reply to queries about its policies on bots. Unlike WeChat’s “official” accounts, designed for commerce and media, these rogue bots hijack personal accounts. They can be purchased on Taobao, the country’s most popular online marketplace, for a couple of dollars or less. Some accounts are even “farmed” before they’re sold, which means they already have friends and have logged a certain amount of human-like activity, such as posting on Moments, WeChat’s newsfeed-like feature. “If I grow a WeChat account to 3,000 to 5,000 friends, one ad on my Moments could be worth between [US$14 to US$140],” explains Li Jiarui, a Javascript and WeChat bot developer based in Beijing. “It depends on the quality of your account.” More bots mean more WeChat accounts. This is another example of WeChat hacking: multiple apps installed on one device. Photo credit: Tencent. Jiarui doesn’t farm WeChat accounts, but she’s familiar with the industry. Account farming is driven by the needs of marketing and advertising agencies, as well as weishang, or “micro shops” run through personal WeChat accounts. Unlike brand accounts, personal accounts are easier to register and can participate in group chats. These shopkeepers often use their Moments to advertise all kinds of products, from imported baby powder to fake luxury handbags. “Because they often get shut down, we can learn a lot from their experience,” says Jiarui. Jiarui began developing WeChat bots about half a year ago to automate group management for her dance community on the messaging app. Her bot can automatically pull friends into groups and welcome new members, as well as hold basic conversations thanks to a Chinese natural language processing framework called Turing Robot. In fact, her chatbot is so popular that Tencent once chose it as a beta tester for WeChat. “They thought I was a serious WeChat addict,” she laughs. “They probably thought that I was on WeChat almost 24 hours a day, not doing much else. Because of my activity, they assumed I was a high-quality user.” Jiarui says her bot, which has about 3,000 friends, receives more than 10,000 messages a day. Other chatbots, like “Micro Friend Assistant”, are also designed to tackle WeChat’s clunky group management system. Micro Friend Assistant lets group administrators set responses to keywords, automatically upload shared files to cloud storage, or even track and analyze group activity. But, like Cara, it too was shut down. “This Chinese New Year, I tested out a hongbao bot and then I was banned for like a week or so,” says an employee at a chatbot company, who requested anonymity. He forgot to program the bot to not be the first one to grab the red envelopes – a total bot giveaway. Adding too many friends in a short amount of time can also raise a red flag. Tencent is understandably opaque about its rules for catching bots to keep developers on their toes. But Jiarui has learned a few tricks from the app’s shopkeepers, such as using mobile data instead of wifi to send messages, and tying a bank card to the bot’s account. “Do your best to mimic a real account,” she advises. Chatbots should follow brand accounts, have a profile picture, post on Moments, and both proactively and passively make friends on the app. “Ideally have your friends add you first. And try to have these friends comment on the content in your Moments,” she says. At the moment, many WeChat bot developers rely on hacking the app’s web version. A quick search for “wechat bots” on Github pulls up multiple projects that can turn personal accounts into bots, such as WeChaty, the framework that Jiarui uses. However, that too has its limitations. Scraping the app’s web interface limits you to basic functions, such as sending messages and adding friends. “Web WeChat is this crippled, semi-supported project by Tencent,” emphasizes Alex, a freelance web developer who would only disclose his first name. You can only do about a quarter of what you can do with the mobile app, excluding all the “interesting features,” he says. “No hongbao […] and to re-login, you need to scan a QR code with phone,” Alex adds. Nevertheless, the commercial potential of chatbots has startups like Urbem, a WeChat-based restaurant recommendation and deals startup, interested in the technology. The startup’s account is already staffed with a bot that navigates Urbem’s database to recommend restaurants to its users. Urbem sees friendly chatbots as a way to generate leads from the various food groups it manages on WeChat. “We want to link this bot to the bot from our [brand] account’s knowledge base,” explains Steven Chen, founder and CEO of Urbem. “Then this bot [will be] interesting and knowledgeable, and people follow the bot.” “Eventually, we would convert them to our WeChat account, so they can pay to be a member. That’s how we generate revenue,” he says. Given Tencent’s unforgiving stance towards rogue bots leaping into your messages, it’s uncertain how these bots, even those that have a positive impact or fulfill legitimate needs, will develop on the social network. Allowing unofficial bots to thrive on WeChat opens a Pandora’s box of possibilities, including AI of the Cara ilk. For now, bot developers will have to work hard to build increasingly human-like and believable messaging bots to slip under Tencent’s radar. From ：www.techinasia.com/wechat-unofficial-bots by Eva Xiao","categories":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}],"tags":[{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"},{"name":"访谈","slug":"访谈","permalink":"http://lijiarui.github.io/tags/访谈/"}],"keywords":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}]},{"title":"激情与梦想","slug":"2017-02-03-dream","date":"2017-02-03T06:48:06.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2017-02-03-dream.html","link":"","permalink":"http://lijiarui.github.io/thought/2017-02-03-dream.html","excerpt":"","text":"第一次有人说我缺少梦想。 我大部分的执着，不甘心与执拗，激情与拼搏都放在了【证明自己】上。 然而，【证明自己】是最没有意义的事情。 解决问题，才是重点。 这几年，我总是抱着学习的态度，去做很多事情，以学习为目的，但是最终，做事情，还是要从解决问题的角度出发，要以解决问题为目的。 只不过，学习，能为解决问题提供更多的思路，让解决问题变得容易很多。 如果做一件事情，可以不通过学习，就解决了问题，显然是最优解。 而我这几年，貌似本末倒置，如果解决问题，可以让我学习，那我就来做。不过坦白讲，说这句话我有点大言不惭，因为我似乎，也没有真正漂亮的解决过什么问题。。。 会过来，我的梦想是什么呢？ 似乎谈到梦想，就不能说赚钱，而我竟然这么赤裸裸，我希望以卖掉公司作为梦想，以赚钱作为梦想，这种庸俗而又赤露的想法，似乎印证了——- 我只是一个披着【文艺且有梦想的有志青年】外衣的【庸俗商人】。 我对很多东西感到迷茫，我特别容易和别人进行较劲，我想赢。 可是，赢了谁呢？","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"解忧杂货铺","slug":"2017-01-22-grocery-store","date":"2017-01-22T06:51:42.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"reading/2017-01-22-grocery-store.html","link":"","permalink":"http://lijiarui.github.io/reading/2017-01-22-grocery-store.html","excerpt":"","text":"站在人生的岔路口，人究竟应该怎么做？我希望读者能在掩卷时喃喃自语：我从未读过这样的小说。——东野圭吾 “很多时候，咨询的人心里已经有了答案，来咨询只是想确认自己的决定是对的。”这就像抛硬币一样，把硬币抛到空中的时候，也是有了选择的时候。他们只是迷途的羔羊，手中都有地图，却没有去看，或是不知道自己的位置，所以回信的人只要点出他们的羁绊所在，他们就知道该如何走下去。 每一条你所走过的路，其实都是你人生的必经之路 “下一次当你忘记你是谁以及你在这世界上存在的意义之时，记得写一封信，投进自己内心的牛奶箱吧。” 是一部很温馨的书","categories":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}],"tags":[],"keywords":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}]},{"title":"西部世界","slug":"2017-01-15-western-world","date":"2017-01-15T15:02:22.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"reading/2017-01-15-western-world.html","link":"","permalink":"http://lijiarui.github.io/reading/2017-01-15-western-world.html","excerpt":"","text":"“游客之所以会重返（这座乐园），不是因为那些一眼就能看到的、花哨的东西。他们回到（乐园）是为了那些细微的东西、那些细节。他们会再来，是因为他们以为自己发现了没有其他人注意到的东西、某些会让他们爱上的东西。他们寻找并不是一个告诉他们自己是谁的故事，他们已经知道自己是谁了。他们来这里，是希望一窥自己有可能成为什么样的人。”","categories":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}],"tags":[],"keywords":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}]},{"title":"Chat实录｜李佳芮：向前一步的程序媛","slug":"2016-12-04-gitchat-interview","date":"2016-12-04T04:45:32.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"chatbot/2016-12-04-gitchat-interview.html","link":"","permalink":"http://lijiarui.github.io/chatbot/2016-12-04-gitchat-interview.html","excerpt":"11月24日周四晚8点，GitChat团队开启了来自一位前端女技术工程师李佳芮的问答交流，以下是主持人小冰将交流过程重新整理，记录下了分享者和用户之间对微信机器人的交流精彩片段。 问：你能说说目前微信机器人能做什么，不能做什么？ 答：Wechaty的实现原理，是监听Web微信的所有内容，封装成接口给开发者使用。所以原则上，只要能在Web微信上能实现的事情，微信机器人都可以做。注意我说的是Web微信，不是微信客户端。微信在Web上阉割了很多功能，相比较，PC客户端的功能丰富的多。所以抢红包功能做不了。因为在Web微信里面，是无法识别到有红包的事件的。还有，转账功能机器人也做不了。 问：机器人是PC端监听浏览器然后调用微信Api，应用号是基于“微信OS”的“本地”app，这么解释对么？ 答：机器人是在监听浏览器，但是和微信Api没有任何关系，完全是Hack进去的。机器人更像是在解决运营中的机械化重复操作，希望在Chat的过程中，提供服务。","text":"11月24日周四晚8点，GitChat团队开启了来自一位前端女技术工程师李佳芮的问答交流，以下是主持人小冰将交流过程重新整理，记录下了分享者和用户之间对微信机器人的交流精彩片段。 问：你能说说目前微信机器人能做什么，不能做什么？ 答：Wechaty的实现原理，是监听Web微信的所有内容，封装成接口给开发者使用。所以原则上，只要能在Web微信上能实现的事情，微信机器人都可以做。注意我说的是Web微信，不是微信客户端。微信在Web上阉割了很多功能，相比较，PC客户端的功能丰富的多。所以抢红包功能做不了。因为在Web微信里面，是无法识别到有红包的事件的。还有，转账功能机器人也做不了。 问：机器人是PC端监听浏览器然后调用微信Api，应用号是基于“微信OS”的“本地”app，这么解释对么？ 答：机器人是在监听浏览器，但是和微信Api没有任何关系，完全是Hack进去的。机器人更像是在解决运营中的机械化重复操作，希望在Chat的过程中，提供服务。 问：既然是Hack到Web微信的，会不会有一天被封杀了呢？ 答：如果他强制封杀，肯定是有办法的，但是我个人觉得可能性比较低。第一，封杀的话，技术是有成本的，微信也是要考虑投入产出比的；第二，Git上最少有20多个这样的开源项目，而且好多都是几年前就做好了，微信不可能不知道，而且从技术研究和Chatbot的应用研究层面的角度看，这个是有意义的；第三是，这件事如果没有威胁到微信的生态，就不会封杀，不过之前可以批量删除好友的功能就被封了。 PS：我倒是觉得，这个被封杀最大的可能性，是把你的个人微信号封了，之前我看过一个技术社区上有人说，他做了一个防撤回机器人，就是在有人撤回消息的时候用聊天机器人把撤回的消息原封不动发出来。然后就扔到群里让大家玩了。但是因为没有写字数限制，群里发多长的消息，他都会原封不动的发出来，就构成了炸群。 微信就把这个号封了7天，不能给好友发信息，不能发朋友圈，但是可以给好友发红包，然后红包里面带回复内容，我觉得也挺逗的。我有一次也因为没有判断消息是不是自己发的，然后测试修改群名称，结果系统消息和自己发的消息混了，忽然群也不能用了。所以使用的时候，注意一下，比如限制字数啊，屏蔽bot自己发的消息之类的，用message.self()就可以了。 问：微信机器人跟微信官方近期推出的应用号是怎样一个关系，如何结合？ 答：微信机器人和官方近期推出的应用号是不一样的应用场景。应用号，或者说小程序，是在微信的应用上提供一个入口为用户提供服务，这样可以免去下载app的苦恼，很多低频场景的app很适合做小程序。而微信机器人，本质就是一个微信号，现阶段主要是为了释放人力，免去人在微信上做的很多机械性的工作，比如批量通过好友请求啊，比如拉人进群啊，或者批量删好友。这个可能更类似于Chatbot，希望再chat的过程中提供服务。机器人除了做些机械操作，还可以在聊天页面推送一些链接给好友，这个链接可以是小程序的链接，也可以是app的链接，也可以是公众号。 问：机器人断线概率高么？ 答：从我自己使用的情况来看，Wechaty这个框架很稳定，但是网页微信定期会把你踢下去，所以需要重新登录。Wechaty有一个功能，就是通过wechaty.instance({ profile: ‘test’ }) 会把你的session信息存到一个test.wechaty.json的文件中，如果掉线了，会自动重新登录，test可以随便换名字哈。我现在长期在我的服务器上跑两个机器人，基本上一周会掉一次，我在文章里介绍了server酱，是一个从服务器推报警信息到微信的工具，结合server酱，在logout和scan事件的时候加入一个推送，掉线以后会有提醒，如果session没了也会把二维码推给你，还是挺爽的，也不用怕掉线再去服务器上登录了。 问：GitChat现在想用一个微信号实现自动拉人进群的功能（突破扫二维码100人的限制），不知道Wechaty是不是最好的选择？ 答：我认为是很好的选择，实际上我最开始使用Wechaty也单纯是为了突破群二维码100人限制。使用三个关键函数：在聊天页面通过m.from() 获取联系人contact，通过room.find() 找到群，然后room.add(contact) 就可以实现自动拉人了。 问：微信机器人可以检测自己是否还是某个联系人的好友吗？ 答：可以的，Contact有一个Contact.findAll()的函数，返回一个Contact数组，会找到你所有的联系人，然后遍历这个数组，使用contact.say()给所有好友群发消息，判断回复的类型和内容，回复消息的类型可以通过Message.type()获取，如果返回的是10000就是系统消息，一旦判断出返回的是一个“对方不是你好友”的系统消息，那们就判断出这个联系人不是好友了。 问：微信机器人不是走的微信接口去获取数据么，在想一个找回群的需求，不知道是否可以实现？ 答：机器人不是走的微信接口，不过你的要求可以实现，不过需要你常年登着，然后把你所有消息都存进去，这样从登录开始算起的所有内容都可以搜索。我之前做的自动拉人进群的功能，有个小点和你这个需求比较类似。这个人回复机器人暗号，机器人会拉他进去，如果这个人已经在群里了，机器人就会在群里@他一下，这样这个群就在你的聊天界面最前面了。这样有些人群多就可以通过这种方式找到某个沉寂已久的微信群了。 问：现在微信机器人可以处理个人微信号的很多事情，有考虑接下来如何设计机器人让它更加智能化？ 答：恩，有考虑。但是更多的希望，第一步先让这个微信机器人更好的完成自动化的工作，就是说本来需要人做的重复性工作，比如拉群、自动回复、加人、一键群发等等，机器人都帮你先完成了，这个也是很多企业在微信社群运营中面临的很大的困惑。有一句话说的特别好：“Machine should work, People should think” 。 我希望我的微信机器人，在第一步能把很多运营人员面临的问题先解决了，让他们更多的时间放在思考如何进行活动策划、如何留存用户，甚至如何进行商业变现。一方面希望帮助企业节约成本，实现让一个运营人员管理上千个群和微信号，另外一方面，希望帮助企业释放人力，让运营人员从复杂机械化的操作中解放出来，做有创造性的东西。 人工智能方面，现在有一些机器人的平台做的已经很好了，他们是专门研究这个的，做的比我们专业好多，每天就是有好多聪明绝顶的算法工程师在研究，智能化可以使用他们的接口，比如我之前用我的微信机器人接过图灵机器人，效果还不错。我更希望和做智能机器人的企业有合作，共同解决聊天或者社群运营过程中的繁琐问题，或者说，我做的更多是一个应用层面的chatbot尝试，以更少的成本探索更多需求并小成本迭代解决问题。 问：文中提到了好几个实现微信机器人的类库，你是怎样比较最终选择了Wehaty？ 答：我当时确实对比了几个不同的类库，我选择的原因很简单，就是看是用什么语言实现的，因为我对JS比较熟悉，所以使用了Wechaty。其实选类库的时候，我发现Python的库是最早的，且相对比较最完善的。但是有两点原因我没有选择，一是我对Python没有JS熟悉， 二是Python的库虽然早，但是接口封装的不是很干净。 JS的有这几个，你们可以参考下哈：Wechat4U：微信 Wechat web 网页版接口的JavaScript实现，兼容Node和浏览器；Weixinbot Nodejs：封装网页版微信的接口，可编程控制微信消息；WechatBot：面向个人的微信Wechat机器人平台 - 使用微信网页版接口Wechat4u；Wechat-user-bot：正在组装中的微信机器人；Hubot-WeChat Hubot：是一个具有真实微信号的机器人，可以自动回复信息到微信群和某联系人，并能给维护者的微信自动发送Hubot在线状态。 问：文章里提到教舞蹈做视频，你觉得舞蹈给你带来了哪些好处呢？ 答：首先，舞蹈给我带来了很多朋友，认识了工作之外的各种人，而且都是很有趣的人，我在生活中有的时候比较无趣，多和这些人在一起能让我变得有趣一点。另外，当你有一个兴趣爱好的时候，每周的生活过起来就会丰富多彩一点，因为我们拍摄的是系列视频，你会有一个期待，就像追剧一样，而你是剧中的主角或者编导，这种感觉是很美妙的。 最主要的一点，跳舞对我来说是一种运动方式，每周出一点汗是身体和心理的双重放松，也能让我更好的投入工作中，这种运动还有一个副产品，就是可以保持身材，对于姑娘来说，这个还是非常重要的。 问：桔子互动是提供微信运营服务的，是怎样契机开始运营微信服务，以后想要如何发展呢？ 我在研一的时候，公众号刚刚火起来，一个机缘巧合，一个毕业的学长知道我在实验室写php，他的朋友正好有外包需求，所以他牵头，找了几个技术的同学开始接项目。后来索性在学校附近租了个工作室，每周大家都会到工作室里碰一下，一起做项目。随着项目的同质化越来越严重，我们就尝试着做了一个小平台，将一些通用需求，比如签到、填写表单、微信墙、微信婚礼请柬等做成一个一个的模块，然后内部使用，后来接开发接的多了，也开始尝试着打包成服务，可能这就是一个契机吧。 后来我拿着我们做的婚礼请柬参加了创业比赛，还拿了风投，就去深圳做了婚庆O2O，结果因为线下资源和产品方向等原因失败了，回北京之后就又重操旧业，做一些微信运营的项目。我们现在也会接一些H5的项目、网站的项目和内容运营相关的需求，但是现在这一块已经成为一片红海，利润并不是很高。 最近我发现，微信个人号上有很多重复的工作，需要自动化，所以正在尝试往这个方向转，接下来我会把产品模块化，希望可以帮助帮助更多企业在微信社群运营商提供自动化服务，帮助他们节约成本，释放人力。 问：对于创业，你有什么想法可以和大家分享的，又有什么建议是想告诉想要创业的朋友的呢？ 答：对于创业，从我这几年走过的各种弯路来看，专注可能是最重要的。之前一直觉得自己精力充沛，有的时候觉得自己可以做很多东西，然后就会去做各种尝试，但是所有的尝试最好能在一个有限域里面，做的项目也一定要切分一块比较垂直的领域，将这一块做好再去迅速的规模化。 另外，创业就是一场生意，所以整个产品是一定要有商业逻辑在里面的，我最开始做婚庆O2O的时候，可能也是因为拿到了几百万的风投，团队规模又不是很大，以为公司又不缺钱，所以就单纯的想产品做好了，其他东西自然就来了，然后就会陷入闷头做产品的窘况。甚至连如何产生现金流，如何盈利都没有想的非常明白，就去做了。 所以现在我做的内容，也会尽量更加聚焦一点，希望在Chatbot的领域里面，从微信运营自动化入手，帮助企业和某些个人解决实际的运营自动化需求，然后尽量把产品打磨好做精。我希望对Chatbot有兴趣的，可以一起聊聊，希望碰出一些好想法。 问：作为一名优秀的程序媛，有想要给其他程序媛或者想要成为程序媛的妹子一些建议么？ 答：首先，就是不要害怕。桑德伯格有一本书叫《向前一步》，鼓励女性追求自己的目标，其实我觉得这几个字在程序世界中也很对。对很多姑娘来说，无论是不是技术出身，都会对程序有一种恐惧，比如总怕把服务器弄坏了，或者什么程序搞崩了。其实不然，去做就好了，大不了重新装个系统，重新写个代码，不要因为害怕出错而不敢做。包括现在，我有的时候也会有这种恐惧，其实应该自己克服的，程序里面很多东西，也像一层窗户纸，向前一步，一捅破，你会发现程序的世界也没有那么扑朔迷离。 另外，是当一大段代码调不通，你也不知道什么问题的时候，好多女生会忽然觉得很绝望，其实有一个小窍门，可以把整个代码分成几个小片段，一个一个去调，就会捉到问题，很多大牛也是这样去调程序的，但是有的时候，我们不敢去拆分，就会陷入很困惑的情况跳不出来。 最后，也是我最想说的，不是只有男生才可以驾驭程序，很多工作，不分男女，只分强弱，其实创业也是一样。 原文地址：GitChat - Chat实录｜李佳芮：向前一步的程序媛","categories":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"},{"name":"访谈","slug":"访谈","permalink":"http://lijiarui.github.io/tags/访谈/"}],"keywords":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}]},{"title":"一个舞娘如何用6行代码写出微信聊天机器人","slug":"2016-11-20-wechaty-wuli-usecase","date":"2016-11-20T04:32:37.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"chatbot/2016-11-20-wechaty-wuli-usecase.html","link":"","permalink":"http://lijiarui.github.io/chatbot/2016-11-20-wechaty-wuli-usecase.html","excerpt":"","text":"作者：@lijiarui, Entrepreneur, Wechaty Author 我一直和我的小伙伴在业余时间拍摄舞蹈教学视频，叫“舞哩”，原创了几百个视频，近千万的播放，所以就建了微信群来和粉丝交流。 1. 与微信机器人的结缘当微信群超过100人以后，就必须要靠群主来手工拉人了，所以我在pad上注册了一个微信小号，让大家通过加小号进微信群，每天晚上9点，我登上这个小号，通过所有的好友请求，然后拉他们进来。有的时候会有几十个好友请求，我就先按一遍通过，然后用手机把这些新好友拍成照片，对照照片去通讯录里一个一个的找到这些好友，拉到微信群里。 直到有一次我出国玩，觉得Pad太沉了就没有带，这意味着有10天无法处理微信小号，等我回来以后，我发现了一个非常悲剧的事情……大概100多个好友请求，仅仅只是拍下这些好友请求，我就得拍好几十张照片！ 这明明就是一些机械化的流水作业啊！这怎么能让一个程序员去完成呢？于是我开始梳理了我的需求，其实只有三个： 自动通过好友请求。 当我的粉丝和我微信聊天的时候，能通过关键词进行自动回复。毕竟问题80%都是一样的。 自动的把他们拉进群里。 所以我在GitHub上找到了Wechaty，发现只要几十行代码，就可以满足我的需求。最主要的是，机械化的流水操作，机器人做的比人工要好很多。 2. 一款简单的微信机器人框架介绍GitHub上与微信机器人相关的开源项目有很多，通过JavaScript、Electron、Go、Perl、Python等等都可以实现。 因为我只对JavaScript比较熟悉，所以选择了Wechaty，他是使用Typescript进行编写的Node项目，是一个专门为个人微信号搭建的bot框架，使用Wechaty的API，只需要6行Javascript代码就可以搭建一个最简单的微信机器人，支持 Linux, Windows, Darwin(OSX/Mac) 和Docker。 我特别喜欢Wechaty的一点是，我不用关心任何实现逻辑，仅仅用JS写业务逻辑层面的事情，就可以了。当我把我需要做什么想清楚以后，JS实现起来，是非常简单便捷的。 Wechaty基本的实现原理，是通过Chrome实时监听微信网页版的各类信息，然后将抓取的信息封装成接口，供开发者使用。 她有9个基本的事件，基本上涵盖了我们Web微信上的所有事件，分别是： scan事件会在需要扫码登陆微信的被触发 login事件会在机器人成功登陆后被触发 logout事件会在机器人掉线以后被触发 message事件会在有新消息的时候被触发 error事件会在程序出现error的时候被触发 friend事件会在有好友请求的时候被触发 room-join事件会在有人加入群时被触发 room-leave事件会在群主移好友出群时被触发 room-topic事件会在群名称被修改时被触发 另外，Wechaty将机器人、联系人、微信群、好友请求封装成类，分别是Wechaty、Contact、Message、和FriendRequest，这样我只要import这些包，就可以直接使用这些类里面的函数模拟微信的各种操作了。比如给指定的人发送消息，我只要用contact.say(‘hello’) 就可以了。Wechaty里面的函数名称起的非常人性化，使用JS进行业务逻辑编写的时候，读代码像和读英文文档一样流畅舒服。 3. 如何安装Wechaty安装Wechaty有两种方式： Docker NPM 非常推荐使用Docker安装Wechaty，虽然我最开始是使用第二种方式，也正是因为我两种方式都试过，才会深深感慨出“Docker大法好” 。 两种方式的安装—Docker和NPM 我在这里进行简单的介绍： Docker安装Docker以后（可以点击这里查看如何安装docker），运行下面的命令，Wechaty就已经成功安装在电脑上了。 docker run -ti --rm --volume=&quot;$(pwd)&quot;:/bot zixia/wechaty run demo 首次运行以后会有如下的截图： Docker会自动的将相关的包部署到电脑里面，安装成功后，以后再运行就会是如下的截图了： Wechaty的编写者对这种特殊字体的热爱到疯狂的地步了，为了让大家了解的更清楚，我就把所有截图内容也就都放上来了。 通常情况下，我会将这串命令alias给wechaty： alias wechaty=&#39;docker run -t -i --rm -e WECHATY_LOG=&quot;silly&quot; --volume=&quot;$(pwd)&quot;:/bot zixia/wechaty:0.5.9’ 并加入-e WECHATY_LOG=”silly” 和后面的版本号：zixia/wechaty:0.5.9，然后这样运行： wechaty run demo -e WECHATY_LOG=”silly” 是为了把wechaty的系统日志都打印出来，方便发现问题和代码调试，zixia/wechaty:0.5.9 在后面加了版本号，因为作者经常更新代码，最近的代码偶尔会出问题，0.5.9是我认为相对比较稳定的版本。 NPM12$ npm install --save wechaty$ node mybot.js 有以下几点值得注意的是： Wechaty需要的Node版本最少在6以上，我现在在使用7。 有一些环境是需要安装Chromedriver的，根据版本不同，大家可能需要注意一下。 如果是在服务器上，需要到Script的脚本中，运行下xvfb.sh的脚本，为Chrome提供一个虚拟的运行环境，并根据运行后的提示，设置程序运行的环境变量。 同样可以设置WECHATY_LOG的值来打印系统日志：WECHATY_LOG=SILLY node mybot.js 关于服务器的说明 Wechaty依赖的很多包都在墙外，建议使用国外的VPS，我使用的是digitalocean 如果只是跑一个机器人服务的话，建议使2GB/2 CPUs 以上的配置，一个机器人服务会占用1G内存左右，如果配上swap的话，短期使用也可以。 4. 如何使用wechaty环境部署好以后下面6行代码，就可以成功的实现基础的bot功能：将微信机器人收到的所有消息打印出来：1234567const &#123; Wechaty &#125; = require('wechaty')Wechaty.instance().on('scan', (url, code) =&gt; console.log(`Scan QR Code to login: $&#123;code&#125;\\n$&#123;url&#125;`)).on('login', user =&gt; console.log(`User $&#123;user.name()&#125; logined`)).on('message', message =&gt; console.log(`Message: $&#123;message.content()&#125;`)).init() 下面对这段代码进行简单的介绍： scan事件：两个返回值 code：返回了扫描的状态 0：初始状态 200：已经成功登陆 201：微信已经扫码，等待确认 408：等待微信扫码中 url：登陆需要扫描的二维码图片的地址，你需要将这个url粘贴到浏览器中打开，进行扫码登陆 login事件：返回的user，代表登陆的用户，返回的是一个Contact的类型，打印出来，是可以看到你当前登陆的用户昵称的。通过user.id()可以获取用户唯一id，user.name()可以获取用户的微信昵称，user.weixin()可以获取用户的微信号。 message事件：返回的是message，代表收到的消息，是一个Message类型。通过message.content()可以获取到消息的内容，message.from()可以获取到消息的发送者，返回的是一个Contact类型。以上只是一些简单的接口介绍，更多详细的接口文档可以点击查看：Wechaty的接口文档 接口文档还在更新中，如果希望更多接口，直接clone源码查看代码，你会发现很多惊喜好玩的小东西。 除此之外，我还希望分享两个实用的Wechaty的工具： qrcode-terminal仅仅把需要扫描的二维码图片作为链接打印在屏幕上，复制链接到浏览器中再去扫描，依然很麻烦，我更希望在terminal上直接扫描二维码登陆进来，这样才能到达demo中的炫酷效果，只需要两步： 1.安装依赖包： npm install qrcode-terminal 2.稍微修改下scan事件后的代码就可以了： 12345678wechaty.on('scan', (url, code) =&gt; &#123; if (!/201|200/.test(String(code)))&#123; let loginUrl = url.replace(/\\/qrcode\\//, '/l/') require('qrcode-terminal').generate(loginUrl) &#125; console.log(`$&#123;url&#125;\\n[$&#123;code&#125;] Scan QR Code in above url to login: `)&#125;) Server酱虽然机器人可以稳定的跑在VPS中，但是网页版微信会经常把用户踢下线，所以我需要知道Wechaty的各种异常情况，有一个简单的第三方工具：Server酱，他是一个能从服务器推报警和日志到手机的工具，非常简单易操作： 1.用GitHub账号登入后，获得一个SCKEY（在「发送消息」页面） 按照引导，点击“微信推送”，扫码关注“方糖”后即可完成绑定2.在login、logout、scan、和error事件触发后，将一些关键信息往 http://sc.ftqq.com/SCKEY.send 发Get请求，我自己的微信里就收到消息了。 这样，当我的机器人出现各种异常情况，我随时随地都可以知道，需要再扫码进入的时候，方糖这公众号就会把二维码推到我的手机上，我只要用机器人的微信扫码就可以了。 恩，就是这样，我实现了闭着眼镜就可以拉人的美梦中。 5. 后续当我开始使用机器人做所有的重复操作的时候，对于加群的工作，我有了进一步的思考，比如我把很多微商拉入黑名单，他们再也无法进入我的微信群；另外我写了个功能，在微信群中加入了管理员功能，这样管理员即使不是群主，也可以把用户踢出微信群；有的时候脑洞大开，还会做个恶作剧，专门收集群友撤回信息，娱乐大众…… 忽然想起了一句话： “People should think, Bot should work”。 当机器能够帮助我们把机械化的工作完成之后，我们才会有更多的时间，思考真正有价值的事情。 Wechaty解放了我的一些重复性工作，我也希望能为Wechaty做点什么，所以我现在在业余时间更新Wechaty的文档，有的时候也会分享一些我在使用Wechaty时候遇到的问题，希望帮助更多的人能够快速上手使用Wechaty。 如果你对Wechaty感兴趣，希望一起交流，一起分享，共同学习，可以扫码添加”桔小秘”为好友，回复wechaty加入WECHATY DEVELOPERS’ HOME。也可以顺便体验下wechaty实现的小功能。","categories":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}],"tags":[{"name":"舞蹈","slug":"舞蹈","permalink":"http://lijiarui.github.io/tags/舞蹈/"},{"name":"舞哩","slug":"舞哩","permalink":"http://lijiarui.github.io/tags/舞哩/"},{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"},{"name":"聊天机器人","slug":"聊天机器人","permalink":"http://lijiarui.github.io/tags/聊天机器人/"}],"keywords":[{"name":"chatbot","slug":"chatbot","permalink":"http://lijiarui.github.io/categories/chatbot/"}]},{"title":"ChatBot Framework-Wechaty","slug":"2016-10-01-project-wechaty","date":"2016-10-01T06:26:08.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"project/2016-10-01-project-wechaty.html","link":"","permalink":"http://lijiarui.github.io/project/2016-10-01-project-wechaty.html","excerpt":"","text":"Hello, ChatBot Developers! Wechaty is a easy to use ChatBot Framework which can help you write the worlds smallest chatbot. Maybe you are very interesting in ChatBot industory, or you just want to get your own wechat personal account robot, Wechaty will always be your friend. Visit Wechaty Github: https://github.com/chatie/wechatyVisit Wechaty Blog: http://blog.chatie.io/ In this video, I will show you how to getting started with Wechaty through a 10 minutes live coding tutorial, with Wechaty Docker Runtime. (Event Node.js Party #18, Beijing) For visiters come from China who can not visit YouTube.com, this video is also hosted on YouKu.com &amp; Tencent Video Getting Started with Wechaty @ YouKu Getting Started with Wechaty @ Tencent Learn more about how to use Wechaty: https://github.com/wechaty/wechaty/wiki/GettingStarted Code in the video: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import &#123;Wechaty, Room&#125; from 'wechaty'const bot = Wechaty.instance()bot.on('scan', (url, code)=&gt;&#123; let loginUrl = url.replace('qrcode', 'l') require('qrcode-terminal').generate(loginUrl) console.log(url)&#125;).on('login', user=&gt;&#123; console.log(`$&#123;user&#125; login`)&#125;).on('friend', async function (contact, request)&#123; if(request)&#123; await request.accept() console.log(`Contact: $&#123;contact.name()&#125; send request $&#123;request.hello&#125;`) &#125;&#125;).on('message', async function(m)&#123; const contact = m.from() const content = m.content() const room = m.room() if(room)&#123; console.log(`Room: $&#123;room.topic()&#125; Contact: $&#123;contact.name()&#125; Content: $&#123;content&#125;`) &#125; else&#123; console.log(`Contact: $&#123;contact.name()&#125; Content: $&#123;content&#125;`) &#125; if(m.self())&#123; return &#125; if(/hello/.test(content))&#123; m.say(\"hello how are you\") &#125; if(/room/.test(content))&#123; let keyroom = await Room.find(&#123;topic: \"test\"&#125;) if(keyroom)&#123; await keyroom.add(contact) await keyroom.say(\"welcome!\", contact) &#125; &#125; if(/out/.test(content))&#123; let keyroom = await Room.find(&#123;topic: \"test\"&#125;) if(keyroom)&#123; await keyroom.say(\"Remove from the room\", contact) await keyroom.del(contact) &#125; &#125;&#125;).init() docker command: 1docker run -ti --volume=\"$(pwd)\":/bot --rm zixia/wechaty mybot.ts Click here to get the repo","categories":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}],"tags":[{"name":"wechaty","slug":"wechaty","permalink":"http://lijiarui.github.io/tags/wechaty/"}],"keywords":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}]},{"title":"舞哩，专注舞蹈教学","slug":"2016-05-10-wuli","date":"2016-05-09T17:33:03.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"project/2016-05-10-wuli.html","link":"","permalink":"http://lijiarui.github.io/project/2016-05-10-wuli.html","excerpt":"","text":"做了好久给其他人开发系统，做社交媒体运营，于是我想做一个自己的系媒体品牌，和几个小伙伴一起做了舞蹈自媒体，舞哩，原名悦舞。录制了200+期视频，全网播放2000万，粉丝累计下来也小几百万了。 在各个平台的链接都po在这里了，也可随意百度‘舞哩’，我们在舞蹈自媒体小有名气吧。后来放弃了，因为这件事，我都不跳舞了。。。 我蛮喜欢李诞说的一句话： 如果我写这本小说赚了钱，那是运气，我要用别的事来谋生，写小说一定要让自己开心,还是那句老话，不要让爱好变为谋生职业，用奋斗挣下的钱去供养爱好这个“小娇妻”，才是智者。 — 李诞 ​​​ 优酷视频 舞蹈视频教学-舞哩 腾讯视频 舞哩 youtube Joy Dancing 舞哩 美拍 舞哩–舞蹈视频教学 B站","categories":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"舞蹈","slug":"舞蹈","permalink":"http://lijiarui.github.io/tags/舞蹈/"},{"name":"舞哩","slug":"舞哩","permalink":"http://lijiarui.github.io/tags/舞哩/"},{"name":"自媒体","slug":"自媒体","permalink":"http://lijiarui.github.io/tags/自媒体/"}],"keywords":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}]},{"title":"你是否曾因自己的梦想受伤 | 我为什么要做舞哩","slug":"2016-04-10-wuli-dream","date":"2016-04-10T06:18:09.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2016-04-10-wuli-dream.html","link":"","permalink":"http://lijiarui.github.io/thought/2016-04-10-wuli-dream.html","excerpt":"","text":"这是一篇90后妹子创业失败后，经历内心挣扎、自我否定、茫然和纠结后，重拾勇气再上征程的倔强故事。 “我到底是不是一个有资格实现自己梦想的人？” 自创业以来，这是我一直在思考的问题。 我一直不是一个很有想法的人，我经常恐惧，迷茫，拿不定主意，与创业者的应有的性格有很大的反差。14年拿到五百万投资后，我没想到自己会休学创业，离开那么熟悉的北京，跑去从没去过的深圳，当上CEO。这并不是设计好的人生轨迹。甚至在去见投资人之前，我都没有想好，我要做一个创业者。 14年拿到投资的起因是13年跟着学长做微信相关的开发和运营，做久了，小团队内做了一个自己的婚庆产品，后来小团队的人毕业后去了BAT，团队也就解散了，我拿着产品参加了一个创业比赛并拿到了奖。机缘巧合的拿着修改后的参赛方案讲给了朋友介绍的投资人，然后开始了真正的“创业路”。 我从来不是一个追赶潮流的人，却一不小心赶上了“创业热”，赶上了“大众创新，全民创业”，成为一个新潮的创业者。 第一次创业的那几个月中，用13年做小作坊项目的方式做创业，立项、排期、跟进、上线。。。好多事情没想清楚，加上社会经验及阅历的不足，对人情世故的了解和线下资源的获取极为薄弱，第一次创业失败。 回北京办了复学说许，做起了老本行，做微信运营和技术开发，给亚马逊、腾讯这些大公司提供过服务，也给10多个小公司做过各种技术服务，作为一个学生，我的公司可以让我生活的很好。 我以为这就是我的“二次创业”，我以为，我是一个“连续创业者”。 期间接触过一些上市公司，一些事业单位，一些政府，想过一些很大的“互联网+”，“智慧城市”项目，甚至和那些大我十岁、二十岁、三十岁的人一起做事，着手准备新公司。 每天写各种ppt，然后提案，然后接项目，然后做项目，然后结项，然后继续找项目，生活越来越焦躁。 一个朋友评价我，“你没有生活”。 我回答他，“这也是生活”。 但是内心有一个声音却开始质疑，这真的是我追求的生活方式么？这难道是传说中的二次创业么？这真的是我的梦想么？ 这不是。 “这种接活做活，通宵达旦，上一单与下一单充满投机性，产品以客户主观意志为标准，生产方式毫无规律，出卖单位时间劳动力在慢车道上发展，不存在幂次法则的突破口，其实谈不上是真正的创业，充其量只能算作是有雇佣关系的自由职业者或者手艺人或者包工头。” 简单的说，我只是一个包工头。我一直以为我不是在砌一块砖，也不是在搭一面墙，而是在修建一座教堂，可是我根本不知道这个教堂有没有，是什么样，只想着，客户满意了，就给我尾款了，于是就又多了一个成功案例，生意就会越来越大。 但是事实并非如此。 2015年是我的本命年，第一家创业公司投资方撤资止损，回北京后谈好价值1亿的“互联网”公司最终因为各种原因止步于核名阶段，错过了秋招找工作的黄金时间，论文抽中盲审被延期，在一起3年的男朋友终于因为父母反对离开了我，并在半个月后接受了父母的安排和新女友订婚。2016年应该拿下的项目被别人暗算，每一件事情都可以展开出很多狗血的剧情。 绝望到了极点，工作没有了，毕不了业了，连曾经最支持我的男朋友都没有了，甚至唯一属于自己的公司资金流也断了。 与其说是开始寻找自己的梦想，不如说是一定要找到一根救命稻草。2013年开始接触创业以来，我唯一学会了“坚持”，只要一直做下去，时间看得见，时间对得起自己。 只是这家皮包公司没有任何坚持下去的理由，于是我进入了一家互联网公司，做起了产品经理。 但我依然有我的梦想，我的爱好—“舞蹈”。 回忆起来，断断续续，也跳了5年舞蹈，从最初的仅仅为了减肥塑身，到后来觉得好看，到后来参加学校的毕业晚会，再后来有些机会参加商演，到后来认识了很多朋友。 这是一件我热爱的事情。 感谢跳舞，我找到了很多志同道合的朋友，我在他们身上学到了很多东西，也收获了很多欢乐。因此，我希望聚集起更多跳舞的朋友。所以，我用工作之外的闲暇时间，和共同梦想的小伙伴为大家提供视频教学。 因为热爱，所以坚持。 因为梦想，所以执着。 不管是否还会被梦想所伤，这些和我拥有共同信念的小伙伴们都会陪着悦舞，勇往直前。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"舞蹈","slug":"舞蹈","permalink":"http://lijiarui.github.io/tags/舞蹈/"},{"name":"舞哩","slug":"舞哩","permalink":"http://lijiarui.github.io/tags/舞哩/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"重庆大学生网络创新创业大赛训练营，“寻找我的合伙人”分享","slug":"2015-08-13-startup-teacher","date":"2015-08-12T16:00:33.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"presentation/2015-08-13-startup-teacher.html","link":"","permalink":"http://lijiarui.github.io/presentation/2015-08-13-startup-teacher.html","excerpt":"","text":"活动信息 PPT内容分享","categories":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"创业失败","slug":"创业失败","permalink":"http://lijiarui.github.io/tags/创业失败/"},{"name":"startup","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"}],"keywords":[{"name":"presentation","slug":"presentation","permalink":"http://lijiarui.github.io/categories/presentation/"}]},{"title":"那年历史课教会我们的","slug":"2015-05-12-history-story","date":"2015-05-12T06:54:13.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2015-05-12-history-story.html","link":"","permalink":"http://lijiarui.github.io/thought/2015-05-12-history-story.html","excerpt":"","text":"“弱国无外交”“没有永恒的敌人，没有永恒的朋友，只有永恒的利益” 早上醒来，忽然脑海里浮现出10多年前，初中历史课上，大眼睛的历史老师讲国与国之间的关系的时候，满脸愤慨的说着这些话。 那个时候我似懂非懂，具体讲的貌似是冷战前后，美国中国俄国外交经常变动，最终老师讲到这么多变动，总会以这样的话收尾。 那个时候，以为国家，都是没有人情味道的独立个体，觉得挺恐怖。 可是现在看起来，人呢？不也应该这个样子？ 对于商业的任何事情，似乎都是一个道理，当你把个人情感放到商业的时候，你会发现自己是愚蠢的，最终每天耗费所有经历在虚无缥缈的事情上，万事蹉跎。 昨天见了之前创业的合伙人a，最终因为各种问题，三个合伙人不欢而散，昨天和其中一个面对面的坐在星巴克，忽然觉得原来我们是可以这么平静的聊下去的，之前我一直过不了心中的砍，我害怕更多的交流，但是却忽略了，和他的交流才是最重要的。 聊了好久，他忽然说，你知道那天我们三个和投资人在一起的时候，如果我真的是你的商业敌人，你犯下最可怕的错误是什么么？当你和敌人在一起的时候，最可怕的就是你喋喋不休在那里说我哪些东西没有做到，我犯了什么错误，纯粹成为个人攻击后，投资人是听不下去的，所以让我去倒了一杯水给他。 他说，那个时候，我最担心的就是你拿出来未来规划的整套方案，然后说你有团队有项目，但是你没有。所以最终投资人撤资止损了。 是的，商业中踢掉一个人最好的方式，并不是攻击对方，收集对方的把柄，这是下下策，而真正的上策是，自己变的足够强大，对方追不上你的步伐，自然淘汰。 投资人也是利益方，最终他不会掺杂个人情感的，选择利益。 个人情感其实是最不着边际的东西，所谓精神食粮，不过就是一些yy的东西，不能填满肚子，也不能变成钞票，只能一个人想，几个人闲谈八卦，对于推进事业毫无任何作用。更可怕的是在商业谈判的时候带有负面情绪的个人情感，那么谈判必输无疑。 后来末了，他说其实我们还是可以合作的，有一些东西，交给我做也放心，我笑笑说，好。 在利益面前，人性是最不值得考验的，也不能去考验。这个在我和另外一个合伙人b之前有着明显的展示。曾经三个人，我们站在一起，一起走过很多路，最终，却因为很小的利益，牵出之前长长的彼此的怨恨。那个时候，整个感情就像多米诺骨牌，之前很细心搭建的东西，坍塌了一个，接下来，一个接一个，顺势倒下。 我们最终也没有按照之前的约定，继续创业。 后来有一天，b忽然说，其实我以为我当初和你站在一起，是觉得a太强，我想保护你，但是后来我发现不是，是因为我觉得和你做事才能成功。 “弱国无外交”忽然眼前浮现历史老师的大眼睛，说的似乎不仅仅是国家， 也指人。 b没有说下文，我猜想下文是，但是后来发现，其实我们一起，依然很难，所以还是分开吧。 当人不够强的时候，也是没有合作伙伴的。因为大家最终还是彼此利用，如果你身上毫无利用的地方，那么合作对于强者，只是施舍和浪费时间而已。 整个世界就是一个交换的世界，拿你有的，换你没有的，如果你什么都没有，谁去跟你交换呢？ “没有永恒的朋友，也没有永恒的敌人，只有永恒的利益”忽然在此浮现历史老师那双因为近视突起的大眼睛。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"创业失败","slug":"创业失败","permalink":"http://lijiarui.github.io/tags/创业失败/"},{"name":"蛮蛮互动","slug":"蛮蛮互动","permalink":"http://lijiarui.github.io/tags/蛮蛮互动/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"香奈儿传奇的人生","slug":"2015-05-02-chanel","date":"2015-05-02T03:26:24.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"reading/2015-05-02-chanel.html","link":"","permalink":"http://lijiarui.github.io/reading/2015-05-02-chanel.html","excerpt":"","text":"首先，例行管理，书籍：《香奈儿和她的浪漫传奇》浙江人民出版社ok，进入正体： 第一个感觉，是coco小姐真的很果断，从未有过纠结和犹豫，大胆的往前走，确实是这个样子，其实，路只要走下去总是有的。每天都闲下来，才是最令人恐慌的事情。 看到下面的这个片段，我的第一个想法就是离开深圳，回到北京以后，立刻分手。既然没有以后，这样耗下去是完全没有意义的事情。既然不可能，就选择离开－－－－失败固然痛苦，保持现状却更悲哀。 “尽管可可~香奈儿此时的顾客只有艾蒂安 巴尔桑的几个朋友而已，她的工作室也没有任何商业店铺的标志，但周围的人还是不难看出，可可 香奈儿在努力地通过这个方式来争取独立。卑微的出身使她不得不小心翼翼地维护着自己的自尊，她希望通过自身的努力来缩小与那些富家小姐们的茶菌。但是在外人看来，可可 香奈儿太天真了，身为纺织世家的后代，艾蒂安 巴尔桑怎么会娶一个贫苦的孤儿呢？每个女人都憧憬能有一个爱自己的人给予自己一个爱的堡垒，一个爱的承诺。可可 香奈儿也不例外” “从小孤苦无依的生活使可可 香奈儿极想有个归宿和寄托，她以为自己找到了所谓的‘爱情’，然而艾蒂安 巴尔桑 却从来不给她任何承诺。6年的感情最终敌不过艾蒂安 巴尔桑母亲的一句话：‘你不能喝这样的女人结婚’。” “这种妄想与奢侈的爱情并不是可可 香奈儿希望的归宿。在这样一段给不了她任何承诺的爱情里，可可香奈儿找不到自己，她害怕再次被遗弃。” “女人渴望永恒，但在这个世界上，最永恒的东西恐怕只有一样，那就是变动。从某种程度上来讲，变动是命运送给我们的一匹桀骜不驯的狮子骢，很多女人向往那种驰骋的快乐，但又害怕驾驭不住，所以，几番思量之后，人们最终还是选择不懂。但可可 香奈儿不会。失败固然痛苦，保持现状却更悲哀。当艾蒂安 巴尔桑问她：‘可可，我爱你！告诉我，你想要什么？我都会给你。’可可 香奈儿坚定地回答：‘我要离开你。总有一天我会忘记你，就像你会忘记我一样。’ ” 第二个感觉，原来，她也会孤独。就像我一个人在深圳的好多个夜晚，我想的是hb能在我的床边，不在和hb住在一起以后，最深的感受，一个人睡在一张床上，真的很孤单。在70多岁的香奈儿自述中，我明显感到了那种孤单。那种孤单是与生具来的，是不可能改变的，是一定会有的。我想起王潇曾经说过一句话：‘小的时候，你以为自己那么独一无二，后来长大以后你发现，其实你不过是芸芸众生中最普通的那一个。’是这个样子的，孤独，也是所有人都有的。顾影自怜没有意义，失眠就更没有意义，睡下去，然后第二天，工作就会忘记一切。 “骄傲的人只知道一种至高无上的利益，那就是自由。但是想要自由，就必须很富有。我从未渴望过什么，除了自由。” “但是，选择做一个人而不是一件受人摆布的东西是件很幸福的事” “用尽力气去爱一个人，生生叫人嫉妒” “可可 香奈儿深知，只有经济上独立，女人才能在事业、爱情等方面与男人平等。” “从流传至今的照片中我们可以看出：可可 香奈儿的唇角永远是上扬的。那是一种乐观的表情，是对生活从未丧失的信心。” “可可 香奈儿有句名言： 没有风险的人生还有什么价值？” 香奈儿的传奇有几个必备因素－－过人的天资、旺盛的经历、高傲的偏执、迷人的魅力、以及一架男人搭救的云梯。","categories":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}],"tags":[],"keywords":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}]},{"title":"《向前一步》谢丽尔 桑德伯格","slug":"2015-04-27-sheryl-sandber","date":"2015-04-27T11:39:17.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"reading/2015-04-27-sheryl-sandber.html","link":"","permalink":"http://lijiarui.github.io/reading/2015-04-27-sheryl-sandber.html","excerpt":"","text":"每当已婚女人问我怎样和丈夫一起带孩子时，我都会回答：“你就放开手，让他去给孩子换尿布，只要他亲自动手，怎么换都行。如果没等你吩咐他就给孩子换尿布，那么就算他把尿布戴在孩子头上你也应该面带微笑。让他自己尝试去做，久而久之他就会了解正确的方法。单如果被迫按照你的方式来，那么很快所有的事情都得你自己动手” 到了想安顿下来的时候，你应该找一个愿意和你平等相处的男人。","categories":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}],"tags":[],"keywords":[{"name":"reading","slug":"reading","permalink":"http://lijiarui.github.io/categories/reading/"}]},{"title":"新的生活，新的开始","slug":"2015-04-17-new-life","date":"2015-04-17T11:39:17.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2015-04-17-new-life.html","link":"","permalink":"http://lijiarui.github.io/thought/2015-04-17-new-life.html","excerpt":"","text":"今天签了之前投资股份转让的协议。 从投资人决定撤资止损到真的，我们把股份转让出来这一刻，感觉还是完全不一样的。 上午和老师聊了餐饮行业的一些东西，也忽然明白自己已经不年轻了，不能再犯错误了。 也许真的应该开始一段新的生活，重新开始。 一个月的时间，每天浑浑噩噩的生活，给自己一个借口，说自己失败了，需要调整，可实际上的调整真的不需要这么久的时间。 当在放弃蛮蛮互动的时候，我才忽然释然，我明白，新的征程已经开始。。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业失败","slug":"创业失败","permalink":"http://lijiarui.github.io/tags/创业失败/"},{"name":"蛮蛮互动","slug":"蛮蛮互动","permalink":"http://lijiarui.github.io/tags/蛮蛮互动/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"失控","slug":"2015-03-17-lose-control","date":"2015-03-17T05:55:51.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2015-03-17-lose-control.html","link":"","permalink":"http://lijiarui.github.io/thought/2015-03-17-lose-control.html","excerpt":"","text":"总是想写点东西，却不知道从哪里开始。一直没有机会从头到位梳理10月份到现在创业半年发生的种种变化，每次都希望在飞机上记录，却总是因为困，或者其他原因错过。对我而言，时间太珍贵了，我不忍心浪费一分一秒，哪怕放在思考上。于是对我而言，执行力是最重要的东西。有的时候忽略了太多思考。一直走下去。然后最近变故颇多，我忽然开始思考，却发现自己陷入了一个纠结的死局－－－每天愁眉苦脸，似乎世界末日就要来到了。 于是我发现，我误解了思考和担忧，甚至觉得把每天的担忧说成自己在思考。 担忧是每天把未来想的很可怕的样子，抱怨生活，然后想着未来会发生的种种悲剧情况。思考，是真的把手头所有杂乱无章的东西进行整理，理出头绪，然后指导执行。 听起来，差别很大，但是经常思考的时候，转换了方向，变成担忧，原因很简单－－－－担忧这个行为做起来要比思考容易太多，只要不开心就可以了，只要想着以后有多难多难就可以了。还可以让别人看到你惆怅的样子，对你产生同情。换句话说，顾影自怜。 我记得有人说过，如果你是一个小姑娘，这样的情况，或许很文艺，或者可以理解。但我是一家公司的CEO。 小姑娘可以没有责任，但我不可以。 但是思考不一样了，思考不是感性的行为，需要一点一点的琢磨，需要把每一个地方都解开，这是很头痛的。 思考和担忧的区别，就好像高中的时候，我们做一道几何解析的题，思考需要一步一步的想着方法，而担忧只要想着，这个题好难啊，做不下去啊，好难啊就可以了。经常听到担忧的人说，我想的比你远，而你想的少，而且，我想的对，确实我想的都发生了。我想对这些人说：你所谓的想的比我远，你是担忧，你想到未来产品做不下去了，你想到未来，合伙人各种勾心斗角，然后你不思考解决的方法，任由担忧发展，发挥你所有的想象力设想担忧会变成什么样。那么这些解决是一定会发生的。 再去说另外一个问题： 关于真相：武媚娘传奇里面有一句话说的特别对－－－‘太平比真相更重要’我一直是一个较真的人，每天我都在追求真相。当你走出校园，你会听到各种各样的声音，对于一件事，一个人，不同嘴里说出来的东西真是千差万别－－－－你需要有去噪，明辨是非的能力。 有的时候，真的分辨不清了，交给直觉，倾听心里最深的声音，或许真的是对的。因为我坚信，如果有一件事，你莫名其妙的坚持，或许真的可能是对的。或许你思考的再深一步，你就会找到所有坚持的理由，然后去做衡量，把所有纠结的点，一个一个比较，就会找到你最想要的东西。 又说远了，我想说的是追求真相的问题。作为一个创业者，很多真相并没有那么重要。当你试图去向一个人证明，自己时是被冤枉的时候，是非常可悲的。我相信，每一个人都有一双慧眼，能洞察所有的东西，只是时间而已。那么就引出了我的另一个问题： 一辈子那么长，何必计较一时的得失 经常听到一个合伙人说，我们来不及了。年轻这一波，马上就过去了。难道创业靠的是营销？陈年是一个营销高手，但是还是没有依靠营销做出任何东西。其实创业更多的是靠踏踏实实走的，经过这半年，我知道的是还是需要心智更加成熟，更加有社会经验，才可以进行下去。处理事情的情绪化，是非常浪费时间的。而在创业的这段时间，最宝贵的就是时间，和所有的竞争对手进行赛跑，争取市场占有率。处理事情的理智化本身就很有难度，这不是天生的，需要时间的锻炼。创业这半年，因为情绪失控，我浪费了太多太多的时间。这是我最后悔的一件事，说到底，还是自己困在自己的小世界里，希望掰开一些本来不那么重要的事情。说白了，很多时候，年轻气盛就会引出另外一个问题： 其实，委屈谁都有，没有必要不甘心。 吵架，争论一些很小的问题，是对事情上的不甘心，最终会给自己设置一个很大的牢笼，自己把自己推到一个角落，然后情绪失控，然后委屈，然后崩溃。这只是小事上面的层面。升级到人生的层面呢？一辈子受到的挫折太多太多了，没有必要每一次被打倒以后，立刻就站起来奔跑。 有的时候，蹲下来是为了跳的更高。 没有十年的卧薪尝胆，又何来的勾践灭吴呢？当我们失败的时候，不去回头看看自己，不去积累，不去学习，立刻站起来，还去迎接那些比我们强大很多的竞争对手，真的是正确的么？马云，刘强东，这些励志的故事，是因为我们没看过他们受挫的样子，而且，他们一直这么拼搏了10多年，我们，还能坚持那么多么？所以，不如收掉年轻时候那么多的不甘心。踏踏实实的积累，踏踏实实的做事。不着急，晚一两年又怎么样呢？ 关于时间其实我是可以平衡工作和时间的，这些东西在我手里，我是可以控制的。向左走向右走，没有人逼我。工作效率的高低，我也能完全控制的。有的时候还是怀念3个月考研创造的神话，我把每段时间控制的很好，固定周二周五去跳形体舞蹈，周三去练瑜伽，周四周日去跳爵士，每个时间段做该做的事。有的时候也会迷茫，也会孤独，也会稍微做错事，但是小小矫情一下之后，写了日记之后，也就过去了。但是现在，我是失控的，我的时间不受控制，每天做的事一拖再拖，每天又有很多东西接踵而来。另外，来到深圳以后，这竟然是我第一次写东西。梳理生活这么需要经常去做的事，我竟然这么久都没做了。对于时间，我失控了，所以效率，我自然失控了，所以情绪，最终还是失控了。这又会引出我的另一个问题，我再也没有办法踏踏实实坐在椅子上，专心的做一件事 关于专心做事我一直认为，自己是自控能力很强的人，我追求每一个大块时间专注的做事，并且会在这一段时间，效率颇高。来到深圳以后，有人告诉我，我可以一心多用，这才是最终的成长。可是半年后，我依然坚持认为，我可以同时接好多个项目，但是，每一个大项目，我都需要一个大段时间去梳理，去总结。我承认自己可以做很多东西，但是我仍然需要专心做事。其实，有的时候想想，一个人做很多事是可以的，但是每一个人都有一个极限。如果整整半年，都在多个事情纠缠的状态，自然自己会陷入困境，最终打败自己的不是项目，而是来自自己渴望争夺一切束缚的情绪－－－－这种情绪是时间积累没有释放造成的。说到底，人不是工作机器，需要休息，没有拼尽全力，100%的做事。人，终归是人。 关于独立 ：从来深圳第一天开始，我就希望躲在一个人后面。帮我指明自己未来的路，但是后来我发现，并没有这样一个人的存在。创业这段时间，我独立了很多，但这并不够。如果我足够独立，或许很多噪声我可以避免，不至于最终作茧自缚。 但是我不能对自己太苛求，太苛求，也会失控，说到底，我还只是一个没有出校门的90后，给自己的要求过高，太苛刻，也是不妥的。 自己有多大的能力，就做多大的事，自己能力cover不住所有的问题，那么，就去积累，积累到一定程度，再去做那么大的事情。 资本也好，合作伙伴也好，最终还是只有在一个level上，才能一起迸发出巨大的力量。 换句话说，要么努力到极限最终让别人帮到，要么，蹲下来积累到和别人一个level的层面，才不会失控。 创业最可怕的，就是失控，自我的失控。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"startup","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"蛮蛮互动","slug":"蛮蛮互动","permalink":"http://lijiarui.github.io/tags/蛮蛮互动/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"婚庆O2O平台-艾娘子","slug":"2015-02-10-ainiangzi","date":"2015-02-09T17:23:12.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"project/2015-02-10-ainiangzi.html","link":"","permalink":"http://lijiarui.github.io/project/2015-02-10-ainiangzi.html","excerpt":"","text":"那个时候我还在读研究生，见了投资人聊完后拿到了500万投资，稀里糊涂的休学只身从北京到深圳，开始我真正意义上的第一次创业。两个合伙人从腾讯辞职，一切看起来那么顺利，最后一切也都失败在了这么顺利上面。我的第一次创业–搭建婚庆O2O平台，艾娘子。 创业失败的文章在博客里写了，这里单纯展示这个产品，聊以慰藉。","categories":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"创业失败","slug":"创业失败","permalink":"http://lijiarui.github.io/tags/创业失败/"},{"name":"艾娘子","slug":"艾娘子","permalink":"http://lijiarui.github.io/tags/艾娘子/"},{"name":"深圳","slug":"深圳","permalink":"http://lijiarui.github.io/tags/深圳/"}],"keywords":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}]},{"title":"喜鹊说，定制属于你的婚礼轻应用","slug":"2014-05-11-xiqueshuo","date":"2014-08-10T16:56:51.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"project/2014-05-11-xiqueshuo.html","link":"","permalink":"http://lijiarui.github.io/project/2014-05-11-xiqueshuo.html","excerpt":"","text":"这是我做的第一款完整的产品，主要功能是帮助婚礼的新人定制微信婚礼请柬，帮助他们发给好友并在朋友圈传播，同时我们还做了微信上墙的应用，帮助新人通过照片上墙的方式帮助新人活跃婚礼现场氛围。 这个产品是青龙哥想出来的，虽然最后没有和我们走到最后，但是他让我通过这个产品，作为wefuture团队的队长，拿到了腾讯T派比赛的银奖和pre-angel特别奖，并因此走上了真正创业的不归路。 因为我们团队当时租在北邮对面学院派805的房间里办公，所以我有个文件夹，专门叫805 虽然产品已经下线了，但是还是需要稍微介绍下这个产品的","categories":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}],"tags":[{"name":"喜鹊说","slug":"喜鹊说","permalink":"http://lijiarui.github.io/tags/喜鹊说/"},{"name":"婚礼","slug":"婚礼","permalink":"http://lijiarui.github.io/tags/婚礼/"},{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"wefuture团队","slug":"wefuture团队","permalink":"http://lijiarui.github.io/tags/wefuture团队/"},{"name":"学院派805","slug":"学院派805","permalink":"http://lijiarui.github.io/tags/学院派805/"}],"keywords":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}]},{"title":"啰啰嗦嗦的记录","slug":"2014-05-26-douban","date":"2014-05-26T01:10:53.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2014-05-26-douban.html","link":"","permalink":"http://lijiarui.github.io/thought/2014-05-26-douban.html","excerpt":"","text":"《状元媒》里有句话：“大羹必有淡味，大巧必有小拙，白璧必有微瑕。物件和人一样，人尚无完人，更何况是物。” 解释和争论，只在两种情况下有意义，一种是这个人很重要，一种是这件事很重要。都不重要就算了，把时间放在自己喜欢的事上面吧！ 大多数时候，别人的成功经验在你身上没什么用，你只需要把你擅长的发挥到极致。 《幸好还有，爱和梦想》的题记里有句话“人生教会我们的从来不是那些我们已经得到的，而是我们怎么得到的。”自我认知的过程，也是成长和收获的过程。 雄鹰在鸡窝里长大，就会失去飞翔的本领，野狼在羊群里成长，也会爱上羊而丧失狼性。人生的奥妙就在于与人相处。生活的美好则在于送人玫瑰和聪明的人在一起,你才会更加睿智。和优秀的人在一起，你才会出类拔萃。所以你是谁并不重要,重要的是，你和谁在一起.——圈子决定命运。 对一千件事说不，才能对一件事情真正说是，把事做大－－－乔布斯 曾看过一篇关于电影《黑天鹅》的评论，其主要观点就是一个人如果缺乏性魅力，无论做什么都不会取得真正的成功。想一想，还真是这样。也许你可以通过不断的自我压抑和自我控制获得某种程度的成功，但想要取得真正的成功，即完成自我实现，你还要尝试着砸碎身上的某些人性的枷锁，释放出你内心里的某些黑暗的力量，这样你的性魅力也会一同被释放出来。心里的某些黑暗的力量，这样你的性魅力也会一同被释放出来。 叔本华“你只能做你想做的，但不能要你想要的” 第一条是尽量少说话。某种意义上，沉默就是性感，任何一个女人都能通过少说话这样一种方式让自己变得更性感一些，一个话多的女人很容易输光底牌和底裤。第二条是学习拒绝的艺术。有人说拒绝是世界上最致命的勾魂偷心术。事实正是如此，学会拒绝的艺术，不仅能提升你的性魅力，还能帮助你节省很多时间和精力，而你也可以因此拥有更充足的时间和精力去做爱做的事，交配交的人。第三条是要么多读书，要么多阅人。当然，最好是既多读书又多阅人。总之，内心世界越丰富，外在气质越神秘，而一个头脑空空的女人想要玩神秘无异于抓屎涂脸。 如果你想说服某人，不要诉诸于道德，而要诉诸于利益－－富兰克林 没有伤害和麻烦，就没有成长和突破 我始终认为，一个年轻人为了不断向前走，他对于生活的任何选择都无关对错","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"微信会议解决方案","slug":"2014-08-01-meeting-solution","date":"2014-04-30T17:15:57.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"project/2014-08-01-meeting-solution.html","link":"","permalink":"http://lijiarui.github.io/project/2014-08-01-meeting-solution.html","excerpt":"","text":"这款产品是因为我们做外包做腻了，每一次都来问我们修改相同的内容，一个微信签到，一个微信抽奖，用了好多次，却每次都要专门改个图片，所以我们后来衍生做了微信会议解决方案，为蓝色光标、微软、飞利浦等大厂提供服务。 因为我们团队当时租在北邮对面学院派805的房间里办公，所以我有个文件夹，专门叫805 产品下线了，却还是要留些产品照片，用来谢幕","categories":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}],"tags":[{"name":"创业","slug":"startup","permalink":"http://lijiarui.github.io/tags/startup/"},{"name":"wefuture团队","slug":"wefuture团队","permalink":"http://lijiarui.github.io/tags/wefuture团队/"},{"name":"学院派805","slug":"学院派805","permalink":"http://lijiarui.github.io/tags/学院派805/"}],"keywords":[{"name":"project","slug":"project","permalink":"http://lijiarui.github.io/categories/project/"}]},{"title":"关于微信公众帐号等微应用和手机app等原生应用的一些小感慨","slug":"2013-11-22-wechat-and-app","date":"2013-11-21T22:14:01.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"tech/2013-11-22-wechat-and-app.html","link":"","permalink":"http://lijiarui.github.io/tech/2013-11-22-wechat-and-app.html","excerpt":"","text":"研究了一阵微信，前两天去了移动互联网开发者大会，关于现阶段移动互联网的两大热门－－－－微信公众帐号和原生APP发表点小评论。 首先，微信的出世，app并不会因此而消失。 对于大部分的商户来说，微信平台能更有效的发挥自我品牌和营销的自媒体力量，然而做专属于企业的app，很多时候没有能够带来更多的实质化效果，但是问题绝对不是出在app产品内容上，所有诸如此类的app功能过于单一，而且，这些企业的管理层没有真正吃透移动互联网和O2O，因此，才会出现现在的微信5.0出世后，商户app的作用被无形的削弱了。 先来对比一下，微信公共帐号对比与app的好处在哪里： 用户门槛低，无需用户下载： 不需要跨ios和安卓平台，对开发者要求低，而且减去了app升级的糟糕体验。 搭车微信做免费社交－－－即微信的朋友圈功能。 微信开放了很多接口，开发者上手简单，很快就可以出产品。 但是，微信还是取代不了app的，如下对比： 商业价值的微信端：商业价值的app 从上面的对比能看出，类似于app的公众账号与原生app的相比，原生app更加个性化的功能和交互方式，相同的页面大小承载更多内容，充分利用硬件的优化，而微信里的公众账号，类似web app，最大优势是基于浏览器而可移植性强，对于不同平台，只需开发一次，但交互方式有限，从上面的公众账号的页面就能看出，交互只限于下面的三个按钮，导致体验与原生app相距甚远。微信公众账号在功能上是阉割后的web app。 公众账号功能应以传递信息为主，互动娱乐为辅。微信开放接口，定制公众账号界面，限制公众账号的消息发送频率，在我看来都是信息流为了让动更顺畅更高效，而不是怀揣一颗app store的心。 以上是用户端的微信和app的比较，再来对比一下，微信公众平台和app store： 公众平台不如应用商店，没有应用商店的评分机制、应用列表、用户评价等;渠道的推广也过度依靠网页端而不是移动端。现在公众主页更像乱军般自我作战，太依靠用户自己去判断选择，没有根本上解决用户面对公众账号时的盲区。应用商店至少会引导你安装哪些APP，但公众平台不会。 公众账号只在二级页面。微信给用户的第一感觉是近乎完美的移动IM，其它功能均是次要的。这会稀释用户的需求。用户在一级页面可以保持巨大的活跃量，但是进入二级页面的积极性必然骤降，此时还要多出一个回复的输入步骤，对维持粘性是个很大的考验。也就是说，人家微信的3亿用户，并不是你公共帐号的用户。 用户未必愿意牺牲良好的体验和操作性换取入口处的便利。当我能用一款简洁风格的APP满足自己需求，或许也是对微信绿色聊天框说再见的时候了。APP具有的用户体验、框架优势都是公众账号不具备的。APP更能进行一些微创新。 综上，商家依然有app的需求，正如连锁企业仍然需要pc端的网站一样。忽然想到值钱我看的新闻，91助手和机锋网同样是应用商店，91助手（以19亿卖掉）之所以会比机锋网（以3亿卖掉）值钱很多的原因就是，91助手没有放弃PC端的固定化。比喻不是很恰当，我只是想说，真正放到固定端的才是王道。 而且，现在的商家并不是很了解什么平台才是又价值的，或者说是更有渗透点的。收益不能只看短期的，长期的收益同样重要，尤其是对于一个要做行业连锁巨头的企业来说。 以餐饮行业为例子，点评类网站和团购优惠券，在近几年的火爆成都超出想象，因为这些确实在短期内，给营业额带来了巨大的提升，但是从长期的角度看，餐饮商家的频繁参与和各大网站的同质化竞争，实际上将O2O市场被搅浑了。商家变得‘聪明’，他们网上的团购和电子优惠卷最终恶意降低了自己的餐饮利润，并让自己陷入到了无穷无尽的恶意竞争中。长期的效果就是：不团购，根本无法留住客户，也就更谈不上老客户和回头客营销。例如，大众点评网的会员卡一度也吵得火爆，但是聪明的商家研究后，清醒的发现此类满天飞的电子会员卡就是各大平台共享商户数据，挖走自己忠实客户的‘恍子’，他们甚至懊恼所有电子会员卡的‘优惠折扣’成了让用户进行‘我查查，比比价’的工具，根本上无法展示自己的‘会员体制’的服务品质。一旦参与过后把消费者宠坏了后，而打折免费为商家免费营销服务的平台无能为力，只能在‘被绑架’中不能自拔。谁知道，如此注重用户体验的微信，会不会也会这样‘绑架’商家呢？当然，现在来看，微信5.0的问世以及开放的更多端口确实对于商家来说，是一件好事，但是，公共帐号，还是无法取代传统app的。但是对于一些简单查询类的app，比如招行信用卡，不过就是查询个账单，消费记录什么的，根本无须app在本地运行，再比如天气预报类的，发一条指令给服务器，返回给我天气状况就行了，搞个花哨的app又得下载，又得更新，实在没有必要。所以，具体选择哪一个，还是要看企业的定位在哪里。在我看来，商家应该充分利用微信开放的接口，推广自己的企业和app，通过简易的微信账号，让消费者了解到自己的更多资讯信息，并在微信帐号中添加自己的app下载方式，诱导用户通过微信帐号下载app，进而做好企业的用户粘合度，才是做好O2O的好方法。 综上，大型商户还是建议以微信为入口，不放弃app，正如我非常喜欢的一个公共帐号的创始人（英语流利说的创始人）所说，用户再哪里，我们就去哪里。 app如果做到如下，很难被微信帐号打败： 美观的UI效果：UI上下了功夫，就会有很好的用户体验，这也是能胜过微信单一的绿色对话框的地方。尤其是加入动画切话效果，这些只有再原生app上才能实现。这个比喻就如同mac和windows的对比，用过苹果的人，很难放弃苹果的东西，转换到windows上，哪怕为之多花一些钱。同样，用户用过你的app，不想放弃了，自然就留住了。 操作相应速度：app与后台通讯只是传输必要的数据，而微信是图文所有东西都有。所以app的响应速度，会比微信等手机网站快一倍以上，如果app的优化技术做好，很难不让用户买单。具体通过数据压缩和本地缓存可以做出，这些是公共帐号无论如何做不到的。","categories":[{"name":"tech","slug":"tech","permalink":"http://lijiarui.github.io/categories/tech/"}],"tags":[],"keywords":[{"name":"tech","slug":"tech","permalink":"http://lijiarui.github.io/categories/tech/"}]},{"title":"认真生活，什么时候都不算晚。","slug":"2012-09-26-live-life-seriously","date":"2012-09-26T13:43:47.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2012-09-26-live-life-seriously.html","link":"","permalink":"http://lijiarui.github.io/thought/2012-09-26-live-life-seriously.html","excerpt":"","text":"好久没来图书馆自习了，因为偏执，因为无知。 还有100天就要考研了，日子竟真开始倒数着过了。 忽然慌了，是不是有些日子都太不认真了，忽然崩溃的给妈妈打了一个三个小时的电话，然后释怀了。 妈妈说，我要认真的生活，什么时候都不算晚，一步一步走，一切都来得及。从现在开始，整装待发，自己状态最好的时候，遇见了，就对了，过去的，就那样吧。 “生活就是这样，如果不能够学会遗忘，那些事情，总是让自己的路走得有点拖拖拉拉” “人的脑子可以记存的空间有限，如果把过去的事情都放在那里的话，我觉得我的脑子肯定不够用，而且过去的事情，有的时候会成为现在的障碍。如果到现在，我还老是沉浸在那段战争采访的精力中，我相信，我肯定会觉得，现在做的每一件事都枯燥无味。”特别喜欢闾丘露薇这段关于遗忘的叙述。 一样的道理，如果我还是沉浸在某些时刻，那每天图书馆的日子一定枯燥平淡，于是纠结，于是放不下。 关键还是在于自己的决心。 “不会遗忘，会让自己的生活变得越来越沉重，这样的沉重，我宁愿留到自己老的时候，或者，在记忆的最深最深出，这些东西还是在哪里。想象自己，满头白发，面对满地落叶，有一个同样那样的老的人，相互诉说各自从前被自己遗忘的事情。”—闾丘露薇 年老了，或许还有空。 而现在，我要的是积累。没有时间去诉说，去回忆。决心放下就放下了。 如果老了，那些东西也忘了，或许，只是因为真的没那么重要。 我要知道，什么才是最重要的事。 考研，工作，赚钱，生活。还没到回忆，感叹，怅然的时候。 生命走到什么点，就应该做什么样的事，由不得超前更由不得落后。 二十几岁，就过二十几岁的日子，没必要装成十八，不在就是不在了，每个人都有不同的欢乐与悲伤。更没必要装成三十，虚伪而世故的过日子。 这样，满地落叶下的诉说才完整，才不会缺少空白。 忽然想起前两天一个朋友问我关于他们学校要出一本书的事，策划，美工，文案，外联。问我会选择什么，然后感慨工科院校的人不喜欢策划，只会埋头干活。其实觉得每个人都在写一本自己的书，策划，美工，文案，外联都是自己一个人，当然策划自己整个的生命章节才是最重要的事。 人生不能没有计划，而计划的精髓就在于什么时候该做什么事。 至于美工文案外联，不过是一天一天的装饰而已。自己选择了什么样的路，就那么赤裸裸的摆在那里，再好的文案美工，描述一个没有实质内容的东西，显得太过肤浅了。 所以，大脑中的那些想法，太重要了。 当然，遗忘也要有度，犯过的错误，不能忘记，起码能作为后来的参考，毕竟这是已经证明错误的选择。 清清楚楚的记住错误，比无止境的缅怀过去，要成熟理智的多，让错误沉淀于心，人才不会飘飘然，才会有一种“struggle to live”的状态，虽然是我发明的词，确实最喜欢的感觉，就像双脚下面有深深的吸力，无论如何都倒不下也飘不起。 前一阵特别喜欢林夕，后来随着他的文章也信佛了，或者说信命更靠谱一点吧，毕竟我没法吃斋。相信命运，相信一切自有安排，变得豁达，就少了偏执，学会感恩，就学会珍惜了。 目标定的高了，累的想跑，目标太低，又有了堕落的借口，凡事刚刚好，或许才是最适合的生活方式了。 PS：就是想写下来，看到闾丘露薇把自己七年前和七年后对同样事物的看法写下来，觉得很棒，或许我还是没法学会把整个人都放在社会大环境下去思考事情，但是起码，我要把在自己脑子里想的记下来，起码，每一天的成长，应该不是为了遗忘吧。 忽然想起晴子上午跟我说的《活着》中的一段话：“活着的力量不在于咆哮呐喊，而是在于承受，承受生命给你的无聊与精彩，伟大与平庸。”是啊，看到的经历的多了自然就慢慢沉淀，然后就变成什么都可以接受的了，就变成我最向往的一种人了。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]},{"title":"忽然好想你们","slug":"2012-03-24-miss-you","date":"2012-03-23T22:24:49.000Z","updated":"2018-11-16T02:59:55.506Z","comments":true,"path":"thought/2012-03-24-miss-you.html","link":"","permalink":"http://lijiarui.github.io/thought/2012-03-24-miss-you.html","excerpt":"","text":"序为什么忘了那么久的事，会在不经意之间惊醒岁月的封尘，然后没有任何原因，就回到了从前。 打开自己的人人主页，翻看着自己的状态日志分享，忽然变得很感性。 离开精英汇以后，上人人的日子变得越来越少了，曾经很多时候上人人，单纯为了发个状态通知北邮活动时间地点，顺便看看其他精英汇的活动，再去看看猫哥晒他的优秀实习生或者去膜拜下他煽情或励志或教训的日志，关注的人一定与精英汇有关。那段日子的人人，喜怒哀乐都是它。有人说我进了一个传销组织，忽然觉得自己苦大仇深，轻易就把自己卖了出去。蓦然回首，原来当年我一直在买进。 除了那段日子的人人，其他的分享和状态，零零散散的罗列着，早就忘记了分享时候的心情。也许日子过的平静了，就会忽然怀念起那些疯狂的日子了。现在皮肤气色比以前好多了，因为不再凌晨三点睡觉甚至熬一整个通宵。每天六点多一点不定闹表也会主动醒来，然后食堂，图书馆，教三，十点回寝室，洗澡，睡觉。每周去几次健身房，或者南门东门换换口味，就是我现在生活的全部。发现自己原来可以有这么多空闲时间，就去图书馆拿了几本书，随便翻翻总比在寝室上网受益得多。 室长说人不能忽然改变的太多，太可怕了，会死人的。 从进入大学就开始叛逆，总觉得我应该像天上的风一样自由自在不受拘束，觉得每天桉树睡觉按时起床是腐朽老年人的生活，逃一学期的课却再用一周的时间去考试还能拿80+才会有成就感，甚至觉得一个人说自己有课而没时间是天下最可笑的借口。保持青春的秘诀就是有一颗不安分的心，宁愿跑起来被绊倒无数次，也不要规规矩矩的走一辈子。 精英汇的那个群名叫“一路上有你”，一路走，一路丢失，一路得到，也是一路欢笑，一路悲伤。大学的所有眼泪似乎都在大二流尽了，从委屈到心酸再到感动。但是再深刻的伤痕似乎都随着时间淡忘愈合，然而曾有过的真挚快乐却一直存在记忆中，愈久愈诱人。于是忽然，好想你们。 就按照“我的分享”里面的故事一点点回忆吧。 如果爱，请深爱分享里面离现在日子最近的是关于精英汇最近的是一个视频，那个时候的心情应该是舍不得离开吧。 再远一点的分享是一对现在已经分手情侣的甜蜜照片。现在看起来却感觉有些事过境迁。 后来再往前看分享就是一篇日志了。《后来—-写在2011年6月12日》，看到自己说“感情是精英汇坚持下去最大的动力”就想不打开标题先感受一下当时的心情。讽刺的是，我竟不记得作者，更别提心情了。 后来我从头到尾看了一遍，仍然想不起当时的心情，耳边却是电话里猫哥娘娘腔一样的说“后来呢？你看后来呢？你知道后来么？”那是我和猫哥唯一一次那么久的电话，也是唯一一次骂我。那个时候我最大的愿望就是能被他骂，因为所有被他骂过的人最后都过的很好。（那个时候我咋就那么贱呢~）后来我记得我去找了全儿，后来二哥也来了，聊着聊着，全儿哭了，而且特别突然，我瞬间就手足无措了。婉宁正好路过，问全儿为什么哭，二哥说“你不懂”。婉宁说“又是精英汇”。 营销大赛再翻一翻，忽然所有的分享都是精英汇了。关于营销大赛，从全国总决赛，到京津冀大区的决赛，到省级决赛，到北邮的校级海选。那个时候我一定要拼命顶yoy和mynovo。 一直觉得“我相信”不好听，可是自从17W的MV后，我经常听那首歌偶尔也会唱一唱。那个学期末，我和佳琪在她“嫂子”家有时也会经常模仿全儿在里面蹦跶的样子。yoy的全国总决赛，印象中最多的就是无数个通宵的夜晚呵青龙哥的支持以及永远看不到太阳的联想会议室。 后来是好多北邮的作品，不过是在北邮校园海选的时候就被淘汰了的作品。 忽然就想起雪儿祥云的作品，还有研一邓涛他们自掏腰包做了队服做了海报，还有pc end，霸气天然呆等等。只是我已经不记得参与者与现场呈现的样子了，但我记得很多是大一的新生。视频特效不是很好，就在ppt中拼命改进，暗中应该都没少努力。但那个时候的我眼里只有yoy和mynovo，也许只是因为yoy和mynovo的人在精英汇最难的时候陪我走了我好远。于是忽然有种愧疚感，尽管最终晋级的团队是作为蓝标、电通、联想的高管选出来的，尽管mynovo如果不是第三名就算我要到外卡他们同样也不会晋级。 生活的意义在于有一群彼此照应的朋友“精英汇之巢”终于成立的时候，漾哥发表的一篇日志，我庆幸，精英汇终于有家了。 忽然就想起第一次的相聚，是在sb和斑马家里，十多个不会做饭的人做出来的“血流成河”还有那硬邦邦的馒头但所有能吃的东西却都被抢光了，“杀人”的时候我军义正言辞“现在到了生死攸关的时刻”，那个时候似乎是第一次认识郭先生，前几天我改了悲伤的签名她特别关切的问我怎么了，说需要的时候一定找她，真的感动了我好久。那个时候是第一次认识人大的两个骗子，还有青龙哥接近凌晨给斑马送的蛋糕，还有sb摇着头说“杀我，没问题啊”。。。。。 现在sb和斑马不住在一起了，精英汇之巢里有的人走了有的人住进来了，一起聚的地方还多了一个郭先生菜菜他们的家。不到一年，精英汇的“家”变化了很多。 接着向前翻阅的是刘佳的日志。我不知道这是不是因为没借到教室红着眼圈找我的那次。 听说雪娇走了以后，刘佳要暂时代管精英汇到换届，又是一届营销大赛了。拍拍，不哭，要坚强。 接着翻阅着分享，发现那段日子的每个分享和精英汇有关。于是也就放弃了每个分享回忆的想法，除非太怀念，太感动。 这张照片就是其中之一。虽然人物不全，却真的特别喜欢：“自己人抬头，不认识的靠墙” 特别想再去一次青龙峡了，再玩一次双杀，再给雷妈过一次生日，再打一次麻将，再吃一次烤肉，再让SB买几张错误的火车票。原来当时苦苦等待sb买火车票的那三个小时如此有趣。嘲笑小平和斑马要去蹦极却爬了两次都没有蹦下来，大半夜闯进华哥的卧室捉奸拍照，冠蓝一屁股坐坏了农家乐的桌子还要赔钱。。。。。 忽然就特别特别后悔上学期期末考试那会sb找我去滑雪我因为期末复习没去，也特别后悔冠蓝那次叫我去回龙观因为我要去科会看王立军而错过了。 有一阵被华哥鸟巢求婚的照片刷了屏，看到现场的场景，突然发现我不知道从什么时候开始，离他们越来越远。原来友情和爱情一样，没有经营，最后也会形同陌路。 Y470全国首站与营销大赛全国首站日子再往前推进，就是Y470全国首战的视频了，我喜欢这个活动。 活动现场很成功，联想也给了好多支持。那天来了好多刚认识不久的人还有好多记者，那个时候刚刚认识斑马sb他们没多久，斑马和这个项目没有太大关系跑来现场捧场让我很感动，华哥也让京津冀的每个精英汇都出了一部分人。 那个时候蔡奔为了当法老往脸上画了好多很难洗掉的水彩还伤了皮肤，雪娇为了艳后穿很妖艳，李柯蜷缩在塔里面憋了很久，但是活动结束后根儿和君儿却来找我，说芮芮现在精英汇真的已经很棒了，估计没有我们你也能弄下去了，而且最近想忙点他们自己的事，现在就退了吧。不过以后缺人也可以找他们。忽然发现，无论怎么努力，有些人的离去，我真的无能为力。不过后来他们分别加入了mynovo和yoy，让我还会恍惚的觉得，他们仍然是精英汇最给力的成员，一直没有离开。 那天晚上我没去人大参加营销大赛的首战而是离开北京去了杭州，听说人大那天很成功，冠蓝比联想大boss还有范，那天不仅是营销大赛的首战也是一次人难得齐全的聚会，那天好像也是青龙哥的生日，那天又玩了很久的杀人，那天很欢乐。。。。只是我都错过了，因为太向往南方的温柔水乡而且我确实在那边过了一周非常安静舒服惬意的生活。可谁又知道哪个选择是对的呢？ 忽然想起很久之前米兰昆德拉的《生命不能承受之轻》：人永远都无法知道自己该要什么，因为人只能活一次，既不能拿它跟前世相比，也不能在来生加以修正。没有任何方法可以检验哪种抉择是好的，因为不存在任何比较。一切都是马上经历，仅此一次，不能准备。 北邮的优秀团队——营销大赛总冠军 点了进去，把青龙哥关于营销大赛的每一个文章又看了一遍。忽然想起第一次见到青龙哥的时候是佳宁办csr的时候，csr结束之后在南门碰到青龙哥他们就聊了一会，那个时候还在想要是我能认识这么牛的人多好。没想到营销大赛结束后，不不和他熟悉了，还有静秋姐—–那个牛逼团队的队长。 忽然想起了宿舍柜子上我一直不舍得收起来的奖杯，营销大赛宣讲会现场静秋姐和青龙哥给我的，或者说是给精英汇的，他们希望精英汇越来越好，超越他们。本来应该是“镇汇之宝”到现在我都没给雪娇，就是很舍不得。 轮岗看到这个视频，忽然发现好久没听到你们的消息了。 小黑，荷花，小平，菜菜，鹏飞哥。 现在很庆幸自己有机会去参加轮岗，因为那些天有你们。我和小平两个疯丫头砍起价来像个泼妇，让荷花菜菜先回去却忍不住在大钟寺的商场门口拍照装作童真。那个时候正逢圣诞，大钟寺的商场遍地的霓虹灯，夜景梦幻浪漫。忽然想起上地五街冬天的早晨5点，天气干冷干冷，几个人一起从联想走到汉庭一路上吐出的白色哈气。 还有我和小平从金五星回来的公交车，从天津精英汇谈到北京精英汇再到京津冀，从华哥说到猫哥，再说到以后说到未来，听她说要考清华美院的研究生我就觉得我靠这个姑娘骨子的这股冲劲咋这么牛逼，我还记得谈心的背景又黑又冷。那个时候刚认识她不久，是第一次和她谈了那么多交心的话，但现在看来好像也是最后一次了。忽然想起营销大赛，依然是我和小平一个房间，却仅仅谈过一次天津精英汇我就跑去和yoy做方案了。同样又想到了米兰昆德拉：谁又知道怎么做是正确的呢？现在的小平，重新留头发了，也还是那么叽叽喳喳，而且好像还是那么愿意熬夜。拼命三郎，我知道你说过你不能对不起猫哥，但是有的时候，是不是可以不要那么拼命。 我还想起了小黑的钢管舞，你可是发了状态说你要跳钢管舞的呀。当年你还真以为我这个学信安的菜鸟能把你的号盗了啊。耳边又忽然想起了荷花当时满是广东腔调的“佳丙姐”。我甚至想起了鹏飞哥当时拿出我们买的道具把自己打扮的很诡异才发现这个低调技术男其实很闷骚。还有菜菜拿着手铐把我锁起来像个凶恶的老鸨。 当时猫哥给了几张电影票让我们结束之后一起去看电影，可是最后谁也没看到那场电影。 轮岗的人中我是最先离开的，圣诞狂欢结束后洗了个澡就回学校了，仅仅为了北邮好不容易争取到的高经费举办的“假面舞会”。没对任何人告别，后来知道猫哥小平小黑荷花菜菜他们彼此告别，让我一直觉得自己那次轮岗似乎都没有画上一个完整的句号。甚至，作为东道主都不告诉浙江广东天津的你们怎么走离机场大巴最近怎么走离火车站更近以及什么时间走最靠谱。但是仍然是，没有机会比较，谁知道我这么做对不对呢。 强行让自己停止回忆吧。 北邮的精英汇假面舞会场景的分享 结束后应该是我长这么大第一次喝的烂醉，大醉易失德，所以从那以后发誓不会有第二次，但却一点不为那次的烂醉后悔，因为要感激的人太多，只能一杯一杯的敬，甚至有的人敬了一杯还想再来一杯。我有些晕醉的时候还哭闹着说雪娇和君儿不来今天这顿饭就不能散，谁也不准走。好在后来雪娇和君儿考完试过来了，雪娇直接拿了一瓶啤酒，两个杯子，一杯一杯的干。至于其他丢人的事，最好不要提醒我了，我也假装自己什么都不知道。 日子接着逆流，无非是各种北邮活动的照片，若是美好，叫她精彩，若是糟糕，便叫经历吧。 “北京会长第一次聚会”，这是分享自闵悦的相册。 那一年，我们才是最亲的战友。虽然拍照的时候，我们也不知道这一年会如何演绎，然而一旦序幕拉开，不管如何怯场，都得演到戏的结尾。 “在你想要放弃的那一刻，想想为什么当初坚持走到了这里。” 忽然想起当年二哥还劝我干脆忽然撒手不管算了，何况我也不适合，好在当年我虽然差不多都听你的，就这个我没听反正自己牢牢抓住没放手。左下角的北邮精英汇群 qq闪了，打开看看，依然不说话 。群还是当年我建的那个，后来陆陆续续的加了一些人进来，热闹了很多。但是精英汇办活动我总会故意路过。忽然想起那次给电脑青灰的活动现场，一个大二的孩子问我同学你要清理电脑么，然后仕锦忽然就过来说学姐好。 又忽然想起大三上学期精英汇在宏福招新，雪娇没空我就替她去讲了讲精英汇，教二的教室，下面坐着的精英汇成员，只有佳宁，景吉，我还有两三个组织招新的国院大二孩子。教室的电脑和投影仪出了问题，ppt放不出来，佳宁忽然就技术帝上去，恍惚像大二办活动的时候二哥在那里调设备。又想起大二那年，我为了在宏福招新混入新生群，为了讲精英汇把猫哥青龙哥漾哥力哥等等的日志相片翻了一遍去写稿子，然后紧张兮兮的拿着熬夜准备的稿子站在台上讲话，那个时候，下面坐着的精英汇成员，依然是佳宁，景吉，我，不过还有蔡奔。 后来精英汇渐渐壮大了，我也分别和哲哥，二哥，根儿，全儿，雪娇，刘佳回去开会或者面试。虽然来来回回路上最少三个小时，但是那阵谁也不跟我抱怨，都特别顶我。把大一的孩子招足了，回到本部一股新生的力量来的也会快一些。虽然大二做了好多活动，但我觉得招来大一的年轻娃们是当年做的最好的一件事了。 一直想说，谢谢佳宁和景吉在宏福办活动的出现，因为只要看到你们，那会的我就会特别安心。 大二那年我经常性的忽然对着电脑开怀大笑或者嚎啕大哭，或许动了真感情的人都会喜怒无常，因为付出太多，难免患得患失。当然，这更可能是自己为不成熟找的借口。 又或许，青春就是这样，不听劝，瞎折腾，享过福，吃过苦，玩过票，碰过壁，使劲折腾，折腾累了，才发现自己转了一个大圈儿，却又回到了原地。可是，却从不后悔，也并不埋怨，因为不转这个圈儿，我可能永远都不知道“原地”在哪里。 不过前方还有很长的路要走，累了，不能成为一个借口。 ps：当初和嘉庚约好要赶快写个“遗书”，嘉庚早在6月还是7月就写好了，我却懒懒的一直拖到现在。本来只是想在考研之前怀念一下自己的大学生活，可是写着写着，就忽然好想你们，干脆等下次心血来潮，再去回忆大学里的日子吧。","categories":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}],"tags":[{"name":"联想","slug":"联想","permalink":"http://lijiarui.github.io/tags/联想/"},{"name":"精英汇","slug":"精英汇","permalink":"http://lijiarui.github.io/tags/精英汇/"}],"keywords":[{"name":"thought","slug":"thought","permalink":"http://lijiarui.github.io/categories/thought/"}]}]}